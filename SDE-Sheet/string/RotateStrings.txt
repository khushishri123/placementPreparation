Rotate String:
Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.
A shift on s consists of moving the leftmost character of s to the rightmost position.
For example, if s = "abcde", then it will be "bcdea" after one shift.
Example 1:
Input: s = "abcde", goal = "cdeab"
Output: true
Example 2:
Input: s = "abcde", goal = "abced"
Output: false

Intuition and Algorithm

All rotations of A are contained in A+A. Thus, we can simply check whether B is a substring of A+A. We also need to check A.length == B.length, otherwise we will fail cases like A = "a", B = "aa".

Time Complexity: O(N^2), where N is the length of A.
Space Complexity: O(N), the space used building A+A.

class Solution {
    public boolean rotateString(String s, String goal) {
        if(s.length()!=goal.length() || (s+s).contains(goal)==false)return false;
            return true;
    }
}
