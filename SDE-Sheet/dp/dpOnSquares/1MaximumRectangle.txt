Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
Eg:
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.

In this we will use the concept of LargestRectangleArea.
We will treat every row as an histogram and pass that row to the LargestRectangleArea
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1 
1 0 0 1 0

For 2nd row we will pass:
2 0 2 1 1
 
for 3rd row:
3 1 3 2 2
for 4th row :
4 0 0 1 0

TC:O(N*(N+M))
SC:O(N)+O(N)

class Solution {
public:
        //for largestAreaRectangle
        //TC:O(N)+O(N)
        //SC:O(N)

     int largestRectangleArea(vector < int > & histo) {
      stack < int > st;
      int maxA = 0;
      int n = histo.size();
      for (int i = 0; i <= n; i++) {
        while (!st.empty() && (i == n || histo[st.top()] >= histo[i])) {
          int height = histo[st.top()];
          st.pop();
          int width;
          if (st.empty())
            width = i;
          else
            width = i - st.top() - 1;
          maxA = max(maxA, width * height);
        }
        st.push(i);
      }
      return maxA;
    }
        //TC:O(N*(N+M))
        //SC:O(N)+O(N)
    int maximalRectangle(vector<vector<char>>& matrix) {
            int n=matrix.size();
            int m=matrix[0].size();
        vector<int> height(m,0);
            int maxi=0;
            for(int i=0;i<n;i++)
            {
                    for(int j=0;j<m;j++)
                    {
                            if(matrix[i][j]=='1')height[j]++;
                            else height[j]=0;
                    }
                    int area=largestRectangleArea(height);
                    maxi=max(maxi,area);
            }
            return maxi;
    }
};
