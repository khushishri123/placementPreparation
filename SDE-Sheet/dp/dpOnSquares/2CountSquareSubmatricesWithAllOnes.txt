Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

We have to figure out how many square submatrices are there.
Brute force :
We will apply for loop and try all possible squares.
[
[1,1,1]
[1,1,1]
[1,1,1]
]

a[0][0] is a square of size 1 .Then we will move diagonally and check that whether it is a square or not and if it is a square then we will add 1 to it.
In all squares we generally don't write recursive sol becuase they are not intuitive,so we write tabulation.
We will create a similar size dp array.
dp[i][j]-> states that how many sqaures end at i,j (right bottom is at i,j).
arr[0][0] is itself the right bottom of the square having size 1.
For arr[0][1]  wecannot consider arr[0][0] becuase it will form a rectangle.But it is forming a square of size 1.
Same with [0][2]
for arr[1][0] we cannot consider upper 1 because it will form a rectangle.
arr[1][1] will be the right bottom for 2 sqaures.
arr[1][2] will be the right bottom for 2 sqaures.
.
.
arr[2][2] will be the right bottom for 3 sqaures.
Now how to fill up this dp table?
We can add all the values of dp table and return our sum.
Remember ist row and 1st col will exactly same value in dap table as that given in array becuase cannot form any square of size>1.
Now d[p[1][1],wkt since its value is 1 .It is forming atleast 1 square .Now to check that if it is the right bottom of other squares:
if(dp[0][0]==1 && dp[0][1]==1 && dp[1][0]==1) dp[1][1]+=1

for dp[1][2]:
if(dp[0][1]>=1 && dp[1][1]>=1 && dp[0][2]==1) dp[1][2]=1+min(dp[0][1],dp[1][1],dp[0][2]);
We are selecting min becuase although dp[1][1] is forming 2 squares but if we considered the 2nd square that it is forming ,it will become a rectangle .So we will consider the min one.
So:
if(dp[i][j]==1)dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1;

TC:O(N*M)
SC:O(N*M)

    //the recursive sol for squares is not intuitive ,that's why we dirctly write tabulation code.
    int countSquares(vector<vector<int>>& matrix) {
            int n=matrix.size();
            int m=matrix[0].size();
        vector<vector<int>> dp(n,vector<int>(m,0));
            //marking the first row with same value as given in matrix
      for(int j=0;j<m;j++)dp[0][j]=matrix[0][j];
            //marking the first col with same value as given in matrix
            for(int i=0;i<n;i++)dp[i][0]=matrix[i][0];
            
            for(int i=1;i<n;i++)
            {
                    for(int j=1;j<m;j++)
                    {
                            if(matrix[i][j]==1)
                            {
                                    dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
                            }
                            else
                            {
                                    dp[i][j]=0;
                            }
                    }
            }
            int ans=0;
            for(int i=0;i<n;i++)
            {
                    for(int j=0;j<m;j++)ans+=dp[i][j];
            }
            return ans;
    }