Given a set of N items, each with a weight and a value, represented by the array w[] and val[] respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

 

Example 1:

Input: N = 2, W = 3
val[] = {1, 1}
wt[] = {2, 1}
Output: 3
Explanation: 
1.Pick the 2nd element thrice.
2.Total profit = 1 + 1 + 1 = 3. Also the total 
  weight = 1 + 1 + 1  = 3 which is <= W.




Memoization:

int f(int ind,int W,int wt[],int val[],vector<vector<int>> &dp)
{
     if(ind == 0){
        return ((int)(W/wt[0])) * val[0];
    }
    
    if(dp[ind][W]!=-1)
        return dp[ind][W];
        
    int notTaken = 0 + f(ind-1,W,wt,val,dp);
    
    int taken = INT_MIN;
    if(wt[ind] <= W)
        taken = val[ind] + f(ind,W-wt[ind],wt,val,dp);
        
    return dp[ind][W] = max(notTaken,taken);
}
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N,vector<int>(W+1,-1));
        return f(N-1,W,wt,val,dp);
    }

Tabulation:
int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N,vector<int>(W+1,0));
       // return f(N-1,W,wt,val,dp);
       
       for(int i=0;i<=W;i++)
       {
          dp[0][i]=(i/wt[0])*val[0];
       }
       
       for(int ind=1;ind<N;ind++)
       {
           for(int w=0;w<=W;w++)
           {
                   int notTaken = 0 + dp[ind-1][w];
    
    int taken = INT_MIN;
    if(wt[ind] <= w)
        taken = val[ind] + dp[ind][w-wt[ind]];
        
 dp[ind][w] = max(notTaken,taken);

           }
       }
       return dp[N-1][W];
    }