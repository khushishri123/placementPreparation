Given a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.

The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).

Example 1:

Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explaination: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.

Whenever a problem can be solved in different patterns ,we will use partition dp.
For eg:
A matrix: 2*2
A=[1 2]
  [3 1]
B matrix: 2*1
B=[2]
  [3]
Remember we can perform multiplication only when 1st matrix col=2nd matrix row.
Also the new Matrix will have 2 rows and 1 col.
Number of operations to be performed will be : 2*2*1=4
  
 C  =[1*2 + 2*3]
     [3*2 + 1*3]
So we have perfomed 4 operations.
So basically we have to return the minimum number of operations in order to multiply these matrix .

Rules Regarding Partition DP:
1). Start with entire block or array.
   So i=1  and j=n-1
2) try all possible partitions {Run a loop to try all possible partitions}
3)Return the best possible 2 partitions.

f(i,j)-> return the min multiplications to  multiply matrix i to matrix j
Workout on :
[10 20 30 40]
Output: 18000

Base case:
if(i==j) return 0;
because then we cannot perform any operation.

2)Try all possible patterns
we will run a loop from k-> i to j-1
and our formula to calculate operations will be: A[i-1]*A[k]*A[j]

3) We will return the minimum of all possible operations.

TC:O(N^3)
SC:O(N^2)


Code:

int f(int i,int j,int arr[],vector<vector<int>> &dp)
{
    if(i==j)return 0;
    if(dp[i][j]!=-1)return dp[i][j];
    int mini=1e9;
    for(int k=i;k<j;k++)
    {
        int steps=arr[i-1]*arr[k]*arr[j]+f(i,k,arr,dp)+f(k+1,j,arr,dp);
        mini=min(mini,steps);
    }
    return dp[i][j]=mini;
}
    int matrixMultiplication(int N, int arr[])
    {
       vector<vector<int>> dp(N,vector<int>(N,-1));
       return f(1,N-1,arr,dp);
    }


