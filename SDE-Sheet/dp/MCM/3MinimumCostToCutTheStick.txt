Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:
Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.
You should perform the cuts in order, you can change the order of the cuts as you wish.
The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.


Example 1:
Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:

The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.
Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).

Intuition: 
Cost:Length of the stick you are cutting.
Firstly it is very important to sort the array because the only we can consider the two sticks to be independent after cut.
See video time at 10 min ,he has explained why we have sorted the array.

So if you will sort the array then they will not be dependent.
[1,3,4,5]
So now we will consider our array to be liuke this:
0 1 2 3 4 5 
0 1 3 4 5 7
Here 7 is the stick length.Initially my i=1 index and j=4 index.
Now to calculate cost: cuts[j+1]-cuts[i-1]
After performing cuts ,the two parts will be f(i,ind-1) and f(ind+1,j)
and these 2 parts are independent so it does not matter that which part I solve first 
means if I put a cut at 4 length then I have 3 cuts remaining [1,3] and [5]
so it does not matyter that I perform cut 5 first abd then 1 and 3 or vice versa

Initially I will pass 1,n-2 because at index 0 we have 0 and at index n-1 we
have stick length.

TC: EXPONENTIAL
SC:O(n^2)

f(i,j)
{
if(i>j)return 0;
//now I can start performing cut from any index.
for(int ind=i;ind<=j;ind++)
{
cost=cuts[j+1]-cuts[i-1]+f(i,ind-1)+f(ind+1,j);
mini=min(cost,mini);
}
return mini;
}

Memoizatoion:
TC:O(N^3)
SC:O(N^2)+ASS

Tabulation:
1)Copy the base cases
2) Write down the changing parameters in opposite fashion.
3) Copy the recursion
TC:O(N^3)
SC:O(N^2)

   int minCost(int n, vector<int>& cuts) {
     int c=cuts.size();  
            cuts.push_back(n);
            cuts.insert(cuts.begin(),0);
             sort(cuts.begin(),cuts.end());
            vector<vector<int>> dp(c+2,vector<int>(c+2,0));
            //return f(1,c,cuts,dp);
            for(int i=c;i>=1;i--)
            {
                    for(int j=1;j<=c;j++)
                    {
                            if(i>j)continue;
                int mini=1e9;
                for(int ind=i;ind<=j;ind++)
                {
                        int cost=cuts[j+1]-cuts[i-1]+dp[i][ind-1]+dp[ind+1][j];
                        mini=min(cost,mini);
                }
                dp[i][j]=mini;
                    }
            }
            return dp[1][c];
    }


