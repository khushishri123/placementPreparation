You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
Example 1:
Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

This time we only have to reduce the transaction fee when a tarnsaction is completed.

int maxProfit(vector<int>& prices, int fee) {
              int n=prices.size();
       vector<int> prev(2,0); //2 becuse but can be 0 or 1
            vector<int> cur(2,0);
                //return f(0,1,prices,dp);
            prev[0]=prev[1]=0;
            cur[0]=cur[1]=0;
            for(int ind=n-1;ind>=0;ind--)
            {
                    for(int buy=0;buy<=1;buy++)
                    {
                            int profit=0;
                if(buy==1)// means I can buy it
                {
                        profit=max(-prices[ind]+prev[0] , 0+prev[1]);
                }
                else
                {
                     profit=max(prices[ind]+prev[1] -fee , 0+prev[0]);   
                }
                 cur[buy]=profit;
                    }
                    prev=cur;
            }
            return prev[1];
    }