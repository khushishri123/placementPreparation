Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".


In this we will apply the logic of LCS.
Let the string be s1="badcecab"
So here we an see that LPS will be "bacecab"
To find out this take s2=rev(s1)
s1="badcecab"
s2="bacecdab"
So the LCS of s1 and s2 will give our ans becuase a Palindromic sequnce reads same from the front and back.
So the LCS will be "bacecab"
Which is of length 7

TC:O(N*M)
SC:O(N*M)

int lcs(string str1,string str2)
        {
                int n=str1.size();
                int m=str2.size();
                vector<vector<int>> dp(n+1,vector<int>(m+1,0));
                 
                //base case
                for(int i=0;i<=n;i++)dp[i][0]=0;
                for(int j=0;j<=m;j++)dp[0][j]=0;
                
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=m;j++)
                        {
                                if(str1[i-1]==str2[j-1])
                                {
                                        dp[i][j]=1+dp[i-1][j-1];
                                }
                                else
                                {
                                        int shift1=dp[i-1][j];
                                        int shift2=dp[i][j-1];
                                        dp[i][j]=max(shift1,shift2);
                                }
                        }
                }
                return dp[n][m];
        }
    int longestPalindromeSubseq(string s) {
        string t=s;
            reverse(t.begin(),t.end());
            return lcs(s,t);
    }