Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4

Intuition: 
We need to find the minimum operations required to convert string str1 to str2. Let us keep the “minimum” criteria aside and think, what maximum operations will be required for this conversion?

The easiest way is to remove all the characters of str1 and then insert all the characters of str2. In this way, we will convert str1 to str2 with ‘n+m’ operations. (Here n and m are the length of strings str1 and str2 respectively). 

str1: abcd
str2: anc
delete 4 charaters of str1 and insert 3 characters into str1 of str2
So at max I can perform 7 operations.
 
The problem states us to find the minimum of insertions. Let us try to figure it out:

To minimize the operations, we will first try to refrain from deleting those characters which are already present in str2. More extensively, we refrain from deleting those characters which are common and come in the same order. To minimize the operations, we would like to keep the maximum common characters coming in the same order intact. These maximum characters are the characters of the longest common subsequence. 
We will first keep the longest common subsequence of the str1 and str2 intact in str1 and delete all other characters from str1.

str1: abcd
str2: anc

LCS: ac
Keeping lcs intact and deleting all others from str1 ie b and d will take 2 op.
Inserting remaining characters in str1 : n which will take 1 op.
Minimum no. of operations: 3

In order to minimize the operations, we need to find the length of the longest common subsequence.

Minimum Operations required = (n – k) + (m – k)

Here n and m are the length of str1 and str2 respectively and k is the length of the longest common subsequence of str1 and str2.

Approach:

The algorithm is stated as follows:

Let n and m be the length of str1 and str2 respectively.
Find the length of the longest common subsequence ( say k) of str1 and str2 as discussed in  Longest Common Subsequence.
Return (n-k) + (m-k) as answer.

Time Complexity: O(N*M)
Reason: There are two nested loops
Space Complexity: O(N*M)
Reason: We are using an external array of size (N*M). Stack Space is eliminated.

Code:

 int lcs(string str1,string str2)
        {
                int n=str1.size();
                int m=str2.size();
                vector<vector<int>> dp(n+1,vector<int>(m+1,0));
                for(int i=0;i<=n;i++)dp[i][0]=0;
                for(int j=0;j<=m;j++)dp[0][j]=0;
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=m;j++)
                        {
                                if(str1[i-1]==str2[j-1])
                                {
                                        dp[i][j]=1+dp[i-1][j-1];
                                }
                                else
                                {
                                        int shift1=dp[i-1][j];
                                        int shift2=dp[i][j-1];
                                        dp[i][j]=max(shift1,shift2);
                                }
                        }
                }
                return dp[n][m];
        }
    int minDistance(string word1, string word2) {
           return word1.size()+word2.size()- 2*lcs(word1,word2);
    }