Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".     


Intuition:
We need to find the minimum insertions required to make a string palindrome. Let us keep the “minimum” criteria aside and think, how can we make any given string palindrome by inserting characters?

The easiest way is to add the reverse of the string at the back of the original string as shown below. This will make any string palindrome.

Here the number of characters inserted will be equal to n (length of the string). This is the maximum number of characters we can insert to make strings palindrome.

The problem states us to find the minimum of insertions. Let us try to figure it out:

To minimize the insertions, we will first try to refrain from adding those characters again which are already making the given string palindrome. For the given example, “aaa”, “aba”,”aca”, any of these are themselves palindromic components of the string. We can take any of them( as all are of equal length) and keep them intact. (let’s say “aaa”).

str: "abcaa"
Keep "aaa" intact as it itself is a palindrome


Now, there are two characters(‘b’ and ‘c’) remaining which prevent the string from being a palindrome. We can reverse their order and add them to the string to make the entire string palindrome.

Adding reverse of the remaining characters to the string:
abcacba

We can do this by taking some other components (like “aca”) as well. 

In order to minimize the insertions, we need to find the length of the longest palindromic component or in other words, the longest palindromic subsequence.

Minimum Insertion required = n(length of the string) – length of longest palindromic subsequence.

Approach:

The algorithm is stated as follows:

We are given a string (say s), store its length as n.
Find the length of the longest palindromic subsequence ( say k) as discussed in dp – 28
Return n-k as answer.

Time Complexity: O(N*N)
Reason: There are two nested loops
Space Complexity: O(N*N)
Reason: We are using an external array of size (N*N). Stack Space is eliminated.

Code: 
   int lcs(string str1,string str2)
        {
                int n=str1.size();
                int m=str2.size();
                vector<vector<int>> dp(n+1,vector<int>(m+1,0));
                for(int i=0;i<=n;i++)dp[i][0]=0;
                for(int j=0;j<=m;j++)dp[0][j]=0;
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=m;j++)
                        {
                                if(str1[i-1]==str2[j-1])
                                {
                                        dp[i][j]=1+dp[i-1][j-1];
                                }
                                else
                                {
                                        int shift1=dp[i-1][j];
                                        int shift2=dp[i][j-1];
                                        dp[i][j]=max(shift1,shift2);
                                }
                        }
                }
                return dp[n][m];
        }
        int lps(string s)
        {
                string t=s;
                reverse(t.begin(),t.end());
                return lcs(s,t);
        }
    int minInsertions(string s) {
        return s.size()-lps(s);
    }