Given an array of positive integers. Find the maximum length of Bitonic subsequence. 
A subsequence of array is called Bitonic if it is first strictly increasing, then strictly decreasing.
 

Example 1:

Input: nums = [1, 2, 5, 3, 2]
Output: 5
Explanation: The sequence {1, 2, 5} is
increasing and the sequence {3, 2} is 
decreasing so merging both we will get 
length 5.

This time we will require 2 dp arrays.
Bitonic array is a combination of incresing and decresing subsequence.
So to calculate the Incresing sub. ,we will use the same logic of LIS.
And to calculate Decreasing sub. we willfirst just reverse the array then cal LIS.
Maxi=max(dp1[i]+dp2[i]-1,maxi);
In this ,we will first calculate the LIS from front side.
dp1[i]->it tells us the length of LIS till index i.

TC:O(N^2)+O(N^2)+O(N)
SC:O(2N)
vector<int> lis(vector<int> &nums,int n)
	{
	    vector<int> dp(n,1);
	    for(int ind=0;ind<n;ind++)
	    {
	        for(int prev=0;prev<=ind-1;prev++)
	        {
	            if(nums[ind]>nums[prev] && dp[ind]<dp[prev]+1)
	            {
	                dp[ind]=dp[prev]+1;
	            }
	        }
	    }
	    return dp;
	}
	int LongestBitonicSequence(vector<int>nums)
	{
	    int n=nums.size();
	    vector<int> dp1=lis(nums,n);
	    reverse(nums.begin(),nums.end());
	    vector<int> dp2=lis(nums,n);
//very very important to reverse the adp2 array since we have reversed the 
//nums array,the last will come at first.
	    reverse(dp2.begin(),dp2.end());
	    int maxi=0;
	    for(int i=0;i<n;i++)
	    {
	        maxi=max(maxi,dp1[i]+dp2[i]-1);
	    }
	    return maxi;
	}