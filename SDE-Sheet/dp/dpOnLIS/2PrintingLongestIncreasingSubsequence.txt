In this lecture we learn the tabulation app of LIS.
Tabulation:
Now ind will start from n-1 to 0 because In recursion we have done opposite ie we have started fron 0 and go till n-1
But Firstly we might think that prev should go from n-1 to -1 but it is wrong because prev should be always lesser than ind, so it will go from ind-1 to -1.
Then we just have to copy the recursion.
Whenever we are talking abount column just do +1
int lengthOfLIS(vector<int>& nums) {
            int n=nums.size();
       vector<vector<int>>  dp(n+1,vector<int>(n+1,0));
         //   return f(0,-1,nums,dp);
            for(int ind=n-1;ind>=0;ind--)
            {
                    for(int prev=ind-1;prev>=-1;prev--)
                    {
                            int notTake=0+dp[ind+1][prev+1];
                int take=INT_MIN;
                if(prev==-1 || nums[ind]>nums[prev])
                {
                        take=1+dp[ind+1][ind+1];
                }
                dp[ind][prev+1]=max(take,notTake);
                    }
            }
            return dp[0][-1+1];
    }

Space Optimization:
TC:O(N*N)
SC:O(N)*2

    int lengthOfLIS(vector<int>& nums) {
            int n=nums.size();
       vector<int>  previous(n+1,0);
            vector<int> cur(n+1,0);
         //   return f(0,-1,nums,dp);
            for(int ind=n-1;ind>=0;ind--)
            {
                    for(int prev=ind-1;prev>=-1;prev--)
                    {
                            int notTake=0+previous[prev+1];
                int take=INT_MIN;
                if(prev==-1 || nums[ind]>nums[prev])
                {
                        take=1+previous[ind+1];
                }
                cur[prev+1]=max(take,notTake);
                    }
                    previous=cur;
            }
            return previous[-1+1];
    }

Algorithmic app:
But we can reduce the SC to O(N).
Intuition:
5 4 11 1 16 8
We will declare a dp array of size n,dp[n]
dp[i] signifies the longest LIS that ends at i index.
Workout:
Length of LIS that ends ends at 5: 1
Length of LIS that ends ends at 4: 1 ,since 5 cannot be its part
Length of LIS that ends ends at 11: 2,either 4 or 5 can be its part
Length of LIS that ends ends at 1: 1
Length of LIS that ends ends at 16: 3
Length of LIS that ends ends at 8: 2

Initially every element has LIS of length 1 becuase if I will start from that element then it itself is the largest one and its length will be 1. 
Initaiily:
array-> 5 4 11 1 16 8
dp->    1 1  1 1  1 1

Now we will start from 1 index.Can 5 be the part of 4 ,no becuase 5>4,So LIS will remain 1
array-> 5 4 11 1 16 8
dp->    1 1  1 1  1 1

Now 2 index.Can 5 be the part of 11 ,yes becuase 5<11,So LIS willbecome 1+1 (dp[0]+1 ,+1 for 11) ,so dp[2]=2.Now can 4 can be the part of 11 ,yes so dp[1]+1 =2
array-> 5 4 11 1 16 8
dp->    1 1  2 1  1 1

Now 3 index.Can 5 be the part of 1 ,no becuase 5>1,So LIS will remain 1.Similarly no one can be its part.
array-> 5 4 11 1 16 8
dp->    1 1  2 1  1 1

Now 4 index.Can 5 be the part of 16 ,yes becuase 5<16,So LIS willbecome 1+1 (dp[0]+1 ,+1 for 16) ,so dp[4]=2.Now can 4 can be the part of 16 ,yes so dp[1]+1 =2 ,similarly 11 can be its part so dp[2]+1=2+1 =3,sO WE WILL STORE MAX ,which is 3 .dp[4]=3
array-> 5 4 11 1 16 8
dp->    1 1  2 1  3 1

Same we have to do for 8
array-> 5 4 11 1 16 8
dp->    1 1  2 1  3 2

We will maintain a max varialble which will give us 3.

Now we want to print the LIS.
For that we will take a has array of size n which will store : who is the previous index.Initailly we will keep index at a[index] becuase initailly every element is considered to be the starting element. 

 int lengthOfLIS(vector<int>& nums) {
            int n=nums.size();
    vector<int> dp(n,1),hash(n);
            int maxi=1;
            int lastIndex=0;
            for(int ind=0;ind<n;ind++)
            {
                    hash[ind]=ind;
                    for(int prev=0;prev<=ind-1;prev++)
                    {
                            if(nums[ind]>nums[prev] && dp[ind]<dp[prev]+1)
                            {
                                    dp[ind]=dp[prev]+1;
                                    hash[ind]=prev;
                            }
                    }
                    if(dp[ind]>maxi)
                    {
                    maxi=dp[ind];
                            lastIndex=ind;
                    }
            }
            vector<int> temp;
            temp.push_back(nums[lastIndex]);
            while(hash[lastIndex]!=lastIndex)
            {
                    lastIndex=hash[lastIndex];
                    temp.push_back(nums[lastIndex]);
            }
            reverse(temp.begin(),temp.end());
            for(auto it:temp)cout<<it<<" ";
            cout<<endl;
            return maxi;
    }
