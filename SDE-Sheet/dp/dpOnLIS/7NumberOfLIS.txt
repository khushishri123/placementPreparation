Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.



We will update the cnt only when we are getting dp[ind]==dp[prev]+1
Mean if we are generating the same subsequence of same length then we will update our cnt[i].
Workout on eg 1.


  int findNumberOfLIS(vector<int>& nums) {
            int n=nums.size();
        vector<int> dp(n,1);
            vector<int> cnt(n,1);
            int maxi=1;
            for(int ind=1;ind<n;ind++)
            {
                    for(int prev=0;prev<=ind-1;prev++)
                    {
                            if(nums[ind]>nums[prev] && dp[ind]<dp[prev]+1)
                            {
                                    dp[ind]=dp[prev]+1;
                                    cnt[ind]=cnt[prev];
                            }
                            else if(nums[ind]>nums[prev] && dp[ind]==dp[prev]+1)
                            {
                                    cnt[ind]+=cnt[prev];
                            }
                    }
                    maxi=max(maxi,dp[ind]);
            }
            //whosoever is giving me max LIS will add to the count.
            int count=0;
            for(int i=0;i<n;i++)if(dp[i]==maxi)count+=cnt[i];
            return count;
    }