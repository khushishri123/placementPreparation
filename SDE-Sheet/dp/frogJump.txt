Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.

Examples:
n=4 [10,20,30,10]
Output: 40

Solution :
As the problem statement states to find the minimum energy required, two approaches should come to our mind, greedy and dynamic programming.

First, we will see why a greedy approach will not work?

The total energy required by the frog depends upon the path taken by the frog. If the frog just takes the cheapest path in every stage it can happen that it eventually takes a costlier path after a certain number of jumps. The following example will help to understand this.

[30,10,60,10,60,50]
by greedy solution, min energy required will be 60.In greedy app. ,in each step we decide that where there is min energy loss ,like from 30 either we can go to 10 or to 60. But we will choose 10 because there is 30-10=20 while 60-30=30.So in greedy app ,we will choose min one .But from this app  we will get wrong ans.
Path that greedy app follow:
30->10->10->50= 60
  20  0   40
 Path of non-greedy app:
30->60->60->50
  30      10  =40

Steps to form the recursive solution:

Step 1: Express the problem in terms of indexes

This can be easily done as there are array indexes [0,1,2,…, n-1].
We can say that f(n-1) signifies the minimum amount of energy required to move from stair 0 to stair n-1. 
Therefore f(0) simply should give us the answer as 0(base case).
Step 2: Try all the choices to reach the goal.

The frog can jump either by one step or by two steps. We will calculate the cost of the jump from the height array. The rest of the cost will be returned by the recursive calls that we make

Our pseudocode till this step will be:

f(ind)
{
if(ind==0)return 0;
int jumpOne=f(ind-1)+abs(a[ind]-a[ind-1]);
int jumpTwo=INT_MAX;
if(i>1) jumpTwo=f(ind-2)+abs(a[ind]-a[ind-2]);
return min(jumpOne,jumpTwo);
}

Once we form the recursive solution, we can use the approach told in Dynamic Programming Introduction to convert it into a dynamic programming one.

Memoization approach:
f(n-1) will signify the minimum energy required to reach n-1 from 0
Trick to apply memoization:
1) Look at the parameters that are changing

//here f(ind-1) wil give you that what is the min energy required to reach at ind-1 .After that we have have to add a[ind]-a[ind-1] because it will tell you that what energu you lost to move from ind-1 to ind


Steps to convert Recursive code to memoization solution:

Create a dp[n] array initialized to -1.
Whenever we want to find the answer of a particular value (say n), we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ). If yes, simply return the value from the dp array.
If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[n] to the solution we get.

int solve(int ind, vector<int>& height, vector<int>& dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = INT_MAX;
    int jumpOne= solve(ind-1, height,dp)+ abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ abs(height[ind]-height[ind-2]);
    
    return dp[ind]=min(jumpOne, jumpTwo);
}

int main() {

  vector<int> height{30,10,60 , 10 , 60 , 50};
  int n=height.size();
  vector<int> dp(n,-1);
  cout<<solve(n-1,height,dp);
}

Time Complexity: O(N)

Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is ‘n’. Hence total time complexity is O(N).

Space Complexity: O(N)

Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)

Tabulation approach:
To convert memoization to tabulation:
Memoization is top down.While tabulation is bottom up.
We go bottom to up in tabulation.In recursion it is top down but it is bottom up. Here we have to take dp array of size n.Then see base case.
it is :
if(ind==0)return 0;
So dp[0]=0;
Declare a dp[] array of size n.
First initialize the base condition values, i.e dp[0] as 0.
Set an iterative loop which traverses the array( from index 1 to n-1) and for every index calculate jumpOne and jumpTwo and set dp[i] = min(jumpOne, jumpTwo).
Code:
int main() {

  vector<int> height{30,10,60,10,60,50};
  int n=height.size();
  vector<int> dp(n,-1);
  dp[0]=0;
  for(int ind=1;ind<n;ind++){
      int jumpTwo = INT_MAX;
        int jumpOne= dp[ind-1] + abs(height[ind]-height[ind-1]);
        if(ind>1)
            jumpTwo = dp[ind-2] + abs(height[ind]-height[ind-2]);
    
        dp[ind]=min(jumpOne, jumpTwo);
  }
  cout<<dp[n-1];
}

Time Complexity: O(N)
Reason: We are running a simple iterative loop

Space Complexity: O(N)
Reason: We are using an external array of size ‘n+1’.


Part 3: Space Optimization

If we closely look the values required at every iteration,

dp[i] , dp[i-1] and  dp[i-2]

we see that for any i, we do need only the last two values in the array. So is there a need to maintain a whole array for it? 

The answer is ‘No’. Let us call dp[i-1] as prev and dp[i-2] as prev2. Now understand the following illustration.
Each iteration’s cur_i and prev becomes the next iteration’s prev and prev2 respectively.
Therefore after calculating cur_i, if we update prev and prev2 according to the next step, we will always get the answer. 
After the iterative loop has ended we can simply return prev as our answer.
Code:
int prev1=0;
int prev2=0;
for(i=1;i<n;i++)
{
int jump1=prev1+abs(a[ind]-a[ind-1]);
int jump2=INT_MAX;
if(i>1)jump2=prev2+abs(a[ind]-a[ind-2]);
int cur=min(jump1,jump2);
prev2=prev1;
prev1=cur;
}
return prev1;