Rememeber adding an element to a heap is always a O(logN) operation and deleting an element is always a O(logN) operation.
Finding max element from a max heap is O(1).


The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0



Brute force:Insert in order.
We will take a array and we will add all elements and everytime we will make sure that it is in sorted order.That will take O(N) TC to insert in an array and to delete from an array.

Optimised app:
I will maintain two heaps: a max heap and a min heap.
We are maintainig a max heap to get the max of left side and min heap to get min. of right side.
If there are odd numbers than the size of max heap and min heap will differ by 1,then we will take the max. element of max heap as our ans.
But is there are even numbers,then we will take the avg. of max element of max heap and min. element of min heap.
Whenever the difference between the size of max heap and min heap is greater than 1 ,then we wil take the max element from max heap and we will push it into min heap.Max heap will give us max element in O(1).
So to add it in min heap it is going to take O(logN) tc.
Also remember that all the elements in max heap should be less than or equal to all the elements in min heap.
To check this: take max elemeent from max heap and min eleemnt from min heap and max<min then it is correct,but if max>min then we are going to remove it from max heap which will take O(logN) TC and add it to min heap.

Everytime we will check that if diff bet size is greater than I will remove min element from min heap and add it to max heap.

Whenever I have to find median I will check the size of both the medians and if it is odd then the one which has larger size:
let max heap has larger size ,then my median will be max elem. of max heap
else min elem. of min heap.
If size is even then, my median is (max+min)/2

class MedianFinder {
public:
    priority_queue<int> maxHeap;
    priority_queue<int,vector<int>,greater<int>> minHeap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        maxHeap.push(num);
    //I have to check that all the elements on the max heap are less than or equal to min heap elem.
        if(!maxHeap.empty() && !minHeap.empty() && maxHeap.top() > minHeap.top() )
        {
            int maxElement=maxHeap.top();
            maxHeap.pop();
            minHeap.push(maxElement);
        }
        //checking that diff between size should not be greater that 1
        int size1=maxHeap.size();
        int size2=minHeap.size();
        if(size1-size2>1)
        {
            int maxElement=maxHeap.top();
            maxHeap.pop();
            minHeap.push(maxElement);
        }
        else if(size2-size1>1)
        {
            int minElement=minHeap.top();
            minHeap.pop();
            maxHeap.push(minElement);
        }
        
    }
    
    double findMedian() {
        int size1=maxHeap.size();
        int size2=minHeap.size();
        int sum=size1+size2;
        if(sum%2)
        {
            double res=size1>size2?maxHeap.top():minHeap.top();
            return res;
        }
        else
        {
            int max=maxHeap.top();
            int min=minHeap.top();
            return (max+min)/2.0;
        }
    }
};