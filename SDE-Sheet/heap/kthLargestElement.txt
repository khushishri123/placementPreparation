Kth largest/smallest element in an array
Problem Statement: Given an unsorted array, print Kth Largest and Smallest Element from an unsorted array.

Example 1:
Input: Array = [1,2,6,4,5,3] , K = 3 
Output: kth largest element = 4, kth smallest element = 3

Solution 1: Sorting the Array
The most naive approach is to sort the given array in descending order.
The index of kth Largest element = k-1 ( zero-based indexing ) 
The index of kth Smallest element = n-k 
The array can also be sorted in ascending order.
The index of kth Largest element = n-k 
The index of kth Smallest element = k-1 ( zero based indexing )
TC:O(NlogN) 
SC:O(1)

Solution 2: Using Heap
The idea is to construct a max-heap of elements . Since the top element of the max-heap is the largest element of the heap , we will remove the top K-1 elements from the heap .  The top element will be Kth Largest element.
To get the Kth Smallest element , we will use a min-heap . After removal of top k-1 elements , the Kth Smallest element is top of the Priority queue.
Let the array be
[17,7,2,30,21] and k = 3

TC:O(n+(n-k)*log(k))
SC:O(1)
Code:
void kth_Largest_Element(vector<int> &arr,int k)
{
//In C++ ,PQ maintains max heap
priority_queue<int> pq;
for(int i=0;i<arr.size();i++)pq.push(arr[i]);
int f=k-1;
while(f>0)
{
pq.pop();
f--;
}
cout<<"kth largest element : "<<pq.top()<<endl;
}

void kth_smallest_Element(vector<int> &arr,int k)
{
//In C++ ,to maintain min heap we have to write:
priority_queue<int,vector<int>,greater<int>> pq;
for(int i=0;i<arr.size();i++)pq.push(arr[i]);
int f=k-1;
while(f>0)
{
pq.pop();
f--;
}
cout<<"kth Smallest element : "<<pq.top()<<endl;
}

