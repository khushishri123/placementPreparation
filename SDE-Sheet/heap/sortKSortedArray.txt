This problem is also known as sort nearly sorted array.
Given an array of n elements, where each element is at most k away from its target position, devise an algorithm that sorts in O(n log k) time.

Input : arr[] = {6, 5, 3, 2, 8, 10, 9}
            k = 3 
Output : arr[] = {2, 3, 5, 6, 8, 9, 10}

Idea: We will maintain a min heap.In min heap ,lesser elements will come on top. If the size of heap is execeding the value of k,then we will pop from heap and we will store the popped element in our ans.
TC:O(NlogK)
SC:O(K)
Code in Java:

public static int[] nearlySorted(int[] arr, int n, int k) {
      //min heap
      PriorityQueue<Integer> pq=new PriorityQueue<>();
      int ans[]=new int[n];
      int j=0;
      for(int i=0;i<n;i++)
      {
          pq.add(arr[i]);
          if(pq.size()>k)
          {
              ans[j++]=pq.peek();
              pq.poll();
          }
      }
      while(pq.size()>0)
      {
          ans[j++]=pq.peek();
          pq.poll();
      }
      return ans;
  }