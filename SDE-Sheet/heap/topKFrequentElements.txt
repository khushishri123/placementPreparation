Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

App 1:
Store (number,freq) in map/array.Sort it . TC:O(NlogN) SC:O(N)

Appr2 :
Step1: Hashing
Step2: maintain a max heap
Step3: Extract k elements
TC:O(N+N+klogN) //Because to heapify pq TC is logN and since we are extracting k times ,so TC will be klogN
struct compare {
    bool operator()(pair<int, int> p1, pair<int, int> p2)
    {
        // if frequencies of two elements are same
        // then the larger number should come first
        if (p1.second == p2.second)
            return p1.first < p2.first;
 
        // insert elements in the priority queue on the basis of
        // decreasing order of frequencies
        return p1.second < p2.second;
    }
};

vector<int> topKFrequent(vector<int>& nums, int k) {
  vector<int> ans;
        unordered_map<int,int> m;
priority_queue<pair<int, int>, vector<pair<int, int> >,compare> pq;
        for(int it: nums)
        {
            m[it]+=1;
        }
        for(auto it:m)
        {
            pq.push({it.first,it.second});
        }
        while(k--)
        {
            ans.push_back(pq.top().first);
            pq.pop();
        }
        return ans;
    }