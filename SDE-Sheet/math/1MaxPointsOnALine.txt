Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4


Intuition: We have to see straight line so we use geometry concept
Approach:
From the time constrains we can observe that solution having O(N^3) are also permitted.
So we will simply apply the SLOPE concept from geometry.
image
If the points have same slope means they are in a straight line.
We just counting them and take max of different slope count.
Return the max count;
 
Time Complexity => O(N^2)
Space Complexity => O(N)

Code:

int maxPoints(vector<vector<int>>& points) {
        //concept is based on slope 
        //if two points have same slope means they lie on same line
        //formula of slope: (y2-y1)/(x2-x1)
        //TC:O(N^2)
     int n=points.size();
        if(n<=2) return n;
        int ans = 0;

        for(auto it1 : points){
            unordered_map<double,int> mp;
            double x1 = it1[0], y1 = it1[1];
            for(auto it2 : points){   
                if(it2 == it1) continue;
                double x2 = it2[0], y2 = it2[1];
                double slope;
                if(x2-x1 == 0){
                    slope = INT_MAX; // slope is infinity for vertical line
                }else{
                    slope = (y2-y1)/(x2-x1);   
                }
                mp[slope]++;
                ans = max(ans,mp[slope]);
            }
        }
        return ans+1; //including point i
       }