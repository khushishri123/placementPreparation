Solution 1: Using Iterative solution

Approach: 
Prime no: A no. having exactly two factors, 1 and itself.
bool isPrime(int N) {
  for (int i = 2; i < N; i++) {
    if (N % i == 0) {
      return false;
    }
  }
  return true;
}

TC:O(N)

Best App:
Approach: Running the for loop till the square root of the number

Code:

bool isPrime(int N) {
  for (int i = 2; i < sqrt(N); i++) {
    if (N % i == 0) {
      return false;
    }
  }
  return true;
}
int main() {

  int n = 11;

  bool ans = isPrime(n);
  if (n != 1 && ans == true) {
    cout << "Prime Number";
  } else {
    cout << "Non Prime Number";
  }
  return 0;
}
Output: Prime Number

Time Complexity: O(âˆšn)

Space Complexity: O(1)