Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Rule 1) No of letters should be same in that window
Rule 2) Quantity of letters should also be same

Remember that all anagrams should be in continuous order .If it will not come in continuous order then no. of characters will increase.
So a subarray gives us string in continuous order and whenever question is related to subarray/substring we will use sliding window.

We will maintain a map that stores frequency .Along with that we will maintain count which is equal to the no. of characters in string 2,so that whenever the count of any character becomes 0 in map,we will decrease the value of count .When we are deleting the character then we have to check that whether that char already exists in map.I exists we havew to increse its count and if it is already 0 in map then we will increase value of count also.

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
     vector<int> ans;
             map<char,int> m;
            for(auto it:p)m[it]++;
            int count=m.size();
            int i=0;
            int j=0;
            int n=s.size();
            int k=p.size();
            while(j<n)
            {
                    if(m.find(s[j])!=m.end())
                    {
                            m[s[j]]--;
                            if(m[s[j]]==0)count--;
                    }
                    if(j-i+1<k)j++;
                    else if(j-i+1==k)
                    {
                            if(count==0)ans.push_back(i);
                            if(m.find(s[i])!=m.end())
                            {
                                    m[s[i]]++;
                                    if(m[s[i]]==1)count++;
                            }
                            i++;
                            j++;
                    }
            }
                    return ans;
    }
};