Problem Statement: Implement a Stack using a single Queue.
Note: Stack is a data structure that follows the Last In First Out (LIFO) rule.
Note: Queue is a data structure that follows the First In First Out (FIFO) rule.
Solution 1:Using 2 queues.
In order to implement Stack we will be requiring a couple of queues: Q1,Q2.
Queue Q1 will behave like a stack
Steps for push:
1) Add to Q2
2) Q1->Q2 (Elements by element){Remove element from Q1 and put it into Q2 ,element by element}
3) swap(Q1,Q2) {put all the elements of Q1 to Q2}

Steps for pop
1) Remove from Q1

Steps for top()
1) Element at the top of Q1.

Workout on :
push(3)
push(4)
push(2)
push(1)
top()
pop()
top()

TC:O(N)//since we are swaping q2 and q1
SC:O(2N) //since we are using 2 queues

Suedo Code:
void push(x)
{
q2.push(x);
while(!q1.empty())
{
q2.push(q1.front());
q1.pop();
}
swap(q2,q1);
}
void pop()
{
q1.pop();
}
int top()
{
return q1.top();
}

Solution 2:

Intuition: As we know stack follows last in first out, which means we get the most recently inserted element whenever we remove an element from the stack. But queue follows first in first out, it means we get that element which we inserted in the starting at each deletion, it means if we want to use the queue like a stack we have to arrange elements in the queue such that we get the most recent element at each deletion.

Approach:

Take a single queue.
push(x): Push the element in the queue.
Use a for loop of size()-1, remove element from queue and again push back to the queue, hence the most recent element becomes the most former element and vice versa.
pop(): remove the element from the queue.
top(): show the element at the top of the queue.
size(): size of the current queue.
Repeat step3 at every insertion of the element.

TC:O(N)
SC:O(N) //since this time we are using a single queue.
Code:
void push(x)
{
q.push(x);
for(int i=0;i<q1.size()-1;i++) //running loop till size-1 elements
{
q.push(q.front());
p.pop();
}
}
void pop()
{
q.pop();
}
int top()
{
return q.front();
}