Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

The test cases are generated so that there will be an answer.

 

Example 1:

Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
Example 2:

Input: nums = [44,22,33,11,1], threshold = 5
Output: 44

We will perform BInary Search . Divide all the numbers by mid and if the sum of divisors is less than or equal to thres. then we will do high=mid-1 because we want to min divisor else if it is not possible then we will do low=mid+1.

Code:

class Solution {
public:
static bool isPossible(int mid,vector<int> &nums,int th)
{
    int sum=0;
    for(int n:nums)
    {
        sum+=(n/mid);
        if(n%mid)sum++;
    }
    if(sum>th)return false;
    return true;
}
    int smallestDivisor(vector<int>& nums, int th) {
     int low,high,mid;
     low=1;
     high=INT_MAX;
     int ans=INT_MAX;
     while(low<=high)
     {
       mid=low+(high-low)/2;
       if(isPossible(mid,nums,th))
       {
           ans=min(ans,mid);
           high=mid-1;
       }
       else low=mid+1;
     }   
     return ans;
    }
};