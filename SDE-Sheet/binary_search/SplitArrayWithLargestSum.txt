Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.


The concept is same as that of allocateBooks.txt .Read it.

Code:
class Solution {
public:
static bool isPossible(vector<int> &nums,int pages,int k)
{
    int count=1;
    int sum=0;
    for(int i=0;i<nums.size();i++)
    {
if(nums[i]>pages)return false;
if(sum+nums[i] > pages)
{
    count++;
    sum=nums[i];
}
else sum+=nums[i];
    }
    if(count>k)return false;
    return true;
}
    int splitArray(vector<int>& nums, int k) {
        if(nums.size() < k)return -1;
        int low=0;
        int high=0;
        for(int i=0;i<nums.size();i++)
        {
            low=min(low,nums[i]);
            high+=nums[i];
        }
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(isPossible(nums,mid,k))
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
return low;
    }
};