Naive Approach:
take a array of size n*m and put all the matrix elements into it.Then sort it.
TC:O(N*M)+O(N*Mlog(N*M))
SC:O(N*M)

Efficient Appr:
Binary search
TC: O(32*r*log(c))
The binary search will take log(c) time and is performed for each row. And since the numbers will be max of 32 bit, so binary search of numbers from min to max will be performed in at most 32 ( log2(2^32) = 32 ) operations. 
Auxiliary Space: O(1) 
SC:O(1)
int countSmallerThanMid(vector<int> &row,int mid)
{
int low=0;
int high=row.size()-1;
int m;
while(low<=high)
{
m=(low+high)/2;
//I want a number which is a[i]>mid
if(row[m]<=mid)low=m+1;
else high=m-1;
}
return low;
}
int findSolution(vector<vector<int>> &A)
{
int low=1;
int high=1e9;  //10^9
int n=A.size();
int m=A[0].size();
while(low<=high)
{
int mid=(low+high)/2;
int cnt=0;
for(int i=0;i<n;i++)
{
cnt+=countSmallerThanMid(A[i],mid);
}
if(cnt<=(n*m)/2)low=mid+1;
else high=mid-1;
}
return low;
}

