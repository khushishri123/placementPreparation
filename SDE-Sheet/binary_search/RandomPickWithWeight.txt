You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.

You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).

For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
 

Example 1:

Input
["Solution","pickIndex"]
[[[1]],[]]
Output
[null,0]

Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.
Example 2:

Input
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]

Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.

Since this is a randomization problem, multiple answers are allowed.
All of the following outputs can be considered correct:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.

To generate random numbers ,we will use rand() function .
Ques 1. How to represent prob?
Ans 1. For eg[1,2,3]
So bucket length will be [0-1] ,[1,3],[3,6]
So,it is nothing but cummulative sum.
Ques 2. How to represent bucket efficently?
Ans 2. Best way is to use cummulative sum.A bucket is represented by gap between 2 elements.
Index:  0        1      2
wt:     1        2      3
cum sum 1        3      6 
Buck:  [0-1]   (1,3]   (3,6]

In bucket 2 and 3 we will not include we will not include 1 and 3 because it is already included previously.

Ques 3. How to randomly select a bucket(inedx)?
Ans 3.   Random No.=rand()%sum
Use binary search to find in which bucket does a no. fall into.
We are using this bucket to get higher weightage while selection.If you have higher weight then you have larger size bucket.
If you have a bucket from 0 to N and within that you have a larger chunk then the probablity of being chosen will be very high but if you have smaller chunk then the prob. of being chosen will low.So this is the concept.

Ques 4. In what range should we generate the random numbers?
Ans 4. Since we want to select a chunk and this chunk is basically representing buckets and the range of buckets will be from 0 to sum. Since we should generate random numbers from 0 to sum and whatever no. comes we actually need to find in what chunk does this no. belong too.
If we find that ,then we can say that this index is getting selected.
Let's say random number generated is 4. 4 will fall in range 3rd (3,6]
.So output will be index 2.
We will use Binary Search to find in which bucket does a no. fall into.

TC:O(N+QlogN)
where N is required to make cummulative sum, after making cummulative sum we are having Q no. of queries and for each query we are basically generating random no. which is O(1) operation. Then applying  binary search we can use upper_bound.

Code:

class Solution {
public:
//this vector will store cummulative sum
vector<int> v;
    Solution(vector<int>& w) {
        v.push_back(w[0]);
        for(int i=1;i<w.size();i++)
        {
            v.push_back(w[i]+v.back());
        }
    }
    
    int pickIndex() {
        int rand_weight=rand()%(v.back());
        return upper_bound(v.begin(),v.end(),rand_weight)-v.begin();
    }
};