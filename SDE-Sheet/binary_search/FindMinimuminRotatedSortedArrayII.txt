154. Find Minimum in Rotated Sorted Array II
Hard
3.6K
407
Companies
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [1,3,5]
Output: 1
Example 2:

Input: nums = [2,2,2,0,1]
Output: 0

It quite similar to Find Minimum in Rotated Sorted array problem but the difference is that here duplicates are allowed. (SEE IT also for explanation).
So here we just need to check that whether nums[low]==nums[mid]==nums[high],and if it is true then we will just do high-- becuase in this case we did not know that whether we have to move left side or right side.

Code:

class Solution {
public:
    int findMin(vector<int>& nums) {
        //here we have to remember that duplicates are also allowed so for that we have to write one more condition that if(nums[high]==nums[mid])high--
        //because in this case you cannot determine where your min is lying
        //remember that nums[low] will give use ans
        int low=0;
        int high=nums.size()-1;
        int mid;
        while(low<=high)
        {
            mid=low+(high-low)/2;
            //it means that left part is sorted means my min will lie in right part 
            if(nums[mid]>nums[high]) low=mid+1;
            else if(nums[low]>nums[mid])//means right part is sorted so if I will move to more right side then I will get larger values
            {
                high=mid;
            }
            else //nums[low]<=nums[mid]<=nums[high]
            {
                high--;
            }
        }
        return nums[low];

    }
};
