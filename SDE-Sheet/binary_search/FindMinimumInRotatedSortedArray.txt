Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

Idea:
We will do binary search.
Now either left side is sorted or right side. If my left side is sorted means if , nums[low]<=nums[mid] or we can say that nums[mid]>nums[high]
eg:[4,5,6,7,0,1,2,3]
then my ans will lie in right side ,so I have to do low=mid+1
else high=mid-1;
Finally nums[low] will give ans.

Code:
 int findMin(vector<int>& nums) {
        int start=0;
        int n=nums.size();
        int end=n-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
           if(nums[mid]>nums[n-1])start=mid+1;
            else end=mid-1;
            }
        return nums[start];
    }