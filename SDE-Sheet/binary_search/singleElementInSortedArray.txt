Problem Statement: Given a sorted array of N integers, where every element except one appears exactly twice and one element appears only once. Search Single Element in a sorted array.

Example 1:
Input: N = 9, array[] = {1,1,2,3,3,4,4,8,8} 
Output: 2
Explanation: Every element in this sorted array except 2 
appears twice, therefore the answer returned will be 2.

Solution 1: Using XOR(^)
Approach: As every number in the array repeats twice and only one number occurs once, we can take advantage of the XOR(^) operator. These are two properties of the XOR operator which will be helpful.
If p is a number then,
p^p=0
p^0=p
If we find the XOR of every element of the array, we will get the answer.

TC:O(N)
SC:O(1)

Code:
        int findSingleElement(vector < int > & nums) {           
            int n = nums.size();
            int elem = 0;
            for (int i = 0; i < n; i++) {
                elem = elem ^ nums[i];
            }
            
            return elem;
        } 
Solution 2:
Approach: Using Binary Search

As the elements are sorted, twice occurring elements will be placed together in the input array. Moreover, the input array has one element occurring once, therefore a general input can be thought of like this.


1  1     2      3  3  4  4  8  8
Left   Single      Right 
Array occuring     array
       element

Now in this left array, the first instance of every element is occurring on the even index and the second instance on the odd index. Similarly in the right array, the first instance of every element is occurring on the odd index and the second index is occurring on the even index. This is summarized below.

Left Half:
1st instance: even index
2nd instance: odd index

Right Half:
1st instance: odd index
2nd instance: even index

So the algorithmic approach will be to use binary search. The intuition is that when we see an element, if we know its index and whether it is the first instance or the second instance, we can decide whether we are presently in the left array or right array. Moreover, we can decide which direction we need to move to find the breakpoint. We need to find this breakpoint between our left array and the right array.

We will check our mid element, if it is in the left array, we will shrink our left array to the right of this mid element, if it is in the right array, we will shrink the right array to the left of this mid element. This binary search process will continue till the right array surpasses our left one and the low is pointing towards the breakpoint.

If my mid is at odd index,Every time we need to check on the left side if the 1st instance of that no. is there or not .
If my mid is at even index,Every time we need to check on the right side if the 2nd instance of that no. is there or not .

Instead of providing if/else condition we can simply write:
if(nums[mid]==nums[mid^1])

because if mid is at an odd index and if we do mid^1 ,we will get the even index number before it.
For eg: if mid=2 then mid^1 will give us 3
if mid=5 then mid^1 will give us 4.
TC:O(logN)
SC:O(1)

Code:
int singleDuplicate(vector<int> &nums)
{
int low=0;
int high=nums.size()-2;
while(low<=high)
{
int mid=(low+high)/2; //or (low+high) << 1
if(nums[mid]==nums[mid^1])low=mid+1;
else high=mid-1;
}
return nums[low];
}