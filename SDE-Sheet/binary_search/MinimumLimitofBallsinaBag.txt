You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.

You can perform the following operation at most maxOperations times:

Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.

 

Example 1:

Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.
Example 2:

Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
The bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.

class Solution {
public:
static bool ifPossible(int m,vector<int> &nums,int maxOp)
{
    
    for(int i=0;i<nums.size();i++)
    {
        //for eg we have m=2 and nums[i]=7 then  1st op: 2,5
        //2nd op: 2,2,3
        //3rd op: 2,2,2,1
        //so we require 7/2 operations
       maxOp-=nums[i]/m;
       //but if nums[i]%2 ==0 then we will require one less op.
       //for eg nums[i]=8 and 8/2=4 but we will require only 3 op.
       if(nums[i]%m==0)maxOp++;
    }
    if(maxOp>=0)return true;
    return false;
}
    int minimumSize(vector<int>& nums, int maxOp) {
        int s,e,mid,ans;
        ans=0;
        s=1;
        e=INT_MAX;
        while(s<=e)
        {
mid=s+(e-s)/2;
//now I am considering mid as tha max value of all the bags
//So ifPossible function will check that the max number allowed is mid ,so //can we make all the numbers in nums smaller than or equal to 'mid' by //using maxOp operations.if it is possible than reduce then we will reduce //our mid becuase in the question it is given that we have to minimize our //penalty
if(ifPossible(mid,nums,maxOp))
{
    ans=mid;
    e=mid-1;
}
else
{
    s=mid+1;
}
        }
        return ans;
    }
};