Search Element in a Rotated Sorted Array/find pivot point from where it is rotated
Problem Statement: There is an integer array nums sorted in ascending order (with distinct values). Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. We need to search a given element in a rotated sorted array.
Input: nums = [4,5,6,7,0,1,2,3], target = 0
Output: 7 
Explanation: Here, the target is 0. We can see that 0 is present in the given rotated sorted array, nums. Thus, we get output as 4, which is the index at which 0 is present in the array.
Solution 1: Using Linear Search

Approach :

We will iterate through the array completely. While iterating, we have to check if we have found the target element in the array. If we find it, we will return its index. If we iterate completely and still do not find an element in the array. This indicates the target is not present and hence we return -1 as mentioned in the question.

Time Complexity : O(N)
Reason: We have to iterate through the entire array to check if the target is present in the array.
Space Complexity: O(1)

Solution 2: Using Binary Search

Intuition :

It is mentioned that the array given is sorted but in a rotated manner. So, we can divide a given array into two parts that are sorted. This gives us hints to use binary search. We can visualize a given array to be composed of two sorted arrays.
Approach :

We divide the array into parts. It is done using two pointers, low and high, and dividing the range between them by 2. This gives the midpoint of the range. Check if the target is present in the midpoint, calculated before, of the array. If not present, check if the left half of the array is sorted. This implies that binary search can be applied in the left half of the array provided the target lies between the value range. Else check into the right half of the array. Repeat the above steps until low <= high. If low > high, indicates we have searched array and target is not present hence return -1. Thus, it makes search operations less as we check range first then perform searching in possible ranges which may have target value.

Workout on 4,5,6,7,0,1,2

Code:
int search(vector<int> &nums,int target)
{
int low=0;
int high=nums.size()-1;
int mid;
while(low<=high)
{
mid=(low+high)/2;
if(nums[mid]==target)return mid;
//check if left part is sorted or not
if(nums[low]<=nums[mid])
{
//check if target lies in that range
if(target>=nums[low] && target<=nums[mid])high=mid-1;
else low=mid+1;
}
else
{
if(target>=nums[mid] && target<=nums[high])low=mid+1;
else high=mid-1;
}
}
return -1;
}
