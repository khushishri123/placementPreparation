A split of an integer array is good if:

The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.
Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].
Example 2:

Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]
Example 3:

Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.

App:
Using Prefix Sum and Binary Search
Let i and j be the left _boundary && j be the right_boundary : arr[i] <= arr[j] - arr[i] <= arr[n-1] - arr[j]
After Simplifying the above inequality , we get arr[j] >= 2 * arr[i] && arr[j] <= (arr[n-1] + arr[i])/2
Time Complexity : O(NlogN)
Space Complexity : O(N)

class Solution {
public:
     int mod = 1e9 + 7;
    
    int find_left_boundary(vector<int> &arr, int start, int end, int i, int n)
    {
        int left_boundary = n;
        
        while(start <= end)
        {
            int mid = (start + end) / 2;
            
            if(arr[mid] >= 2 * arr[i])
            {
                left_boundary = mid;
                
                end = mid - 1;
            }
            
            else{
                
                start = mid + 1;
            }
        }
        
        return left_boundary;
    }
    
    int find_right_boundary(vector<int> &arr, int start, int end, int i, int n)
    {
        int right_boundary = i;
        
        while(start <= end)
        {
            int mid = (start + end) / 2;
            
            if(arr[mid] <= (arr[n-1] + arr[i]) / 2)
            {
                right_boundary = mid;
                
                start = mid + 1;
            }
            
            else{
                
                end = mid - 1;
            }
        }
        
        return right_boundary;
    }
    
    int waysToSplit(vector<int>& arr) {
        
        int n = arr.size();
        
        int ans = 0;
        
        for(int i = 1; i < n; i++)
        {
            arr[i] += arr[i-1];
        }
        
        for(int i = 0; i <= n - 3; i++)
        {
            int left_boundary = find_left_boundary(arr, i + 1, n - 2, i, n);
            
            int right_boundary = find_right_boundary(arr, i + 1, n - 2, i, n);
            
            if(right_boundary >= left_boundary)
            {
                ans = (ans % mod + (right_boundary - left_boundary + 1) % mod ) % mod;
            }
        }
        
        return ans;
    }
};