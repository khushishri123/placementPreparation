Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

APPROACH 1 USING BINARY SEARCH
ALGORITHM

Perform Binary Search on range 1 to n;
low = 1, high = nums.size() - 1;
While the value of high is greater than or equal to low.
calculate mid.
count elements <= to mid.
if count is less than equal to mid.
low = mid + 1 (binary search on right half)
else high = mid + 1 (binary search on left half)
Return low which will point to duplicate.

 int findDuplicate(vector<int>& nums) {
        int low = 1, high = nums.size() - 1, cnt;
        
        while(low <=  high)
        {
            int mid = low + (high - low) / 2;
            cnt = 0;
            // cnt number less than equal to mid
            for(int n : nums)
            {
                if(n <= mid)
                    ++cnt;
            }
            // binary search on left
            if(cnt <= mid)
                low = mid + 1;
            else
            // binary search on right
                high = mid - 1;
            
        }
        return low;
}