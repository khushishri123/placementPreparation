Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 

Example 1:


Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3

Brute Force:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

//Brute Force
 int maxDiff=-1;
//this function will recieve root and child . We will not change our root and try every possible combination with the different child
 void findMaxDiffUtil(TreeNode *root,TreeNode *child)
{
    if(root==NULL || child==NULL)return;
    maxDiff=max(maxDiff,abs(root->val - child->val));
    findMaxDiffUtil(root,child->left);
    findMaxDiffUtil(root,child->right);
}
 void findMaxDiff(TreeNode *root)
{
    if(root==NULL)return;
    findMaxDiffUtil(root,root->left);
    findMaxDiffUtil(root,root->right);
    findMaxDiff(root->left);
    findMaxDiff(root->right);
}
public:
    int maxAncestorDiff(TreeNode* root) {
        maxDiff=-1;
        findMaxDiff(root);
        return maxDiff;
    }
};


Optimised App:
We take any path and keep the track of minValue and maxValue .
When we reach the leaf node then we will return the abs(maxVal-minVal).

Code in C++:
static int  findMaxUtil(TreeNode *root,int maxVal,int minVal)
{
    if(root==NULL)
    {
        return abs(maxVal-minVal);
    }
    maxVal=max(maxVal,root->val);
    minVal=min(minVal,root->val);
    int l=findMaxUtil(root->left,maxVal,minVal);
    int r=findMaxUtil(root->right,maxVal,minVal);
    return max(l,r);
}
    int maxAncestorDiff(TreeNode* root) {
        return findMaxUtil(root,root->val,root->val);
    }
