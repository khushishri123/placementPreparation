Given the root of a complete binary tree, return the number of the nodes in the tree.
According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
Design an algorithm that runs in less than O(n) time complexity.

Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6
Example 2:
Input: root = []
Output: 0

We will use DFS.
TC: O(logN * logN)
SC: O(height of tree) ie O(logN)

class Solution {
public:
    int countNodes(TreeNode* root) {
          if(root==NULL)return 0;
          int lh=findLeftHeight(root);
          int rh=findRightHeight(root);
          //here 1<<lh means we are doing left shift
          // and it can also be written as 1*(2^lh)
          if(lh==rh)return (1<<lh) -1;
          return 1+countNodes(root->left)+countNodes(root->right);
    }
    static int findLeftHeight(TreeNode *root)
    {
    int height=0;
    while(root!=NULL)
    {
        height++;
        root=root->left;
    }
    return height;
    }
    static int findRightHeight(TreeNode *root)
    {
        int height=0;
        while(root!=NULL)
        {
            height++;
            root=root->right;
        }
        return height;
    }
};
