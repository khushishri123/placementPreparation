A string is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.
It means that the content of the String type object cannot be changed.

// Java program to demonstrate difference between
// String, StringBuilder and StringBuffer

class GFG {
	public static void concat1(String s1)
	{
		s1 = s1 + "forgeeks";
	}
	public static void concat2(StringBuilder s2)
	{
		s2.append("forgeeks");
	}
	public static void concat3(StringBuffer s3)
	{
		s3.append("forgeeks");
	}
	public static void main(String[] args)
	{
String s1 = "Geeks";
concat1(s1);
System.out.println("String: " + s1);
StringBuilder s2 = new StringBuilder("Geeks");
concat2(s2);
System.out.println("StringBuilder: " + s2);
StringBuffer s3 = new StringBuffer("Geeks");
concat3(s3);
System.out.println("StringBuffer: " + s3);
	}
}

Output
String: Geeks
StringBuilder: Geeksforgeeks
StringBuffer: Geeksforgeeks

 Output explanation: 

Concat1: In this method, we pass a string “Geeks” and perform “s1 = s1 + ”forgeeks”. The string passed from main() is not changed, this is due to the fact that String is immutable. Altering the value of string creates another object and s1 in concat1() stores reference of the new string. References s1 in main() and cocat1() refer to different strings.
Concat2: In this method, we pass a string “Geeks” and perform “s2.append(“forgeeks”)” which changes the actual value of the string (in main) to “Geeksforgeeks”. This is due to the simple fact that StringBuilder is mutable and hence changes its value.
Concat3: StringBuilder is similar and can be compatible at all places to StringBuffer except for the key difference of thread safety. StringBuffer is thread-safe while StringBuilder does not guarantee thread safety which means synchronized methods are present in StringBuffer making control of one thread access at a time while it is not seen in StringBuilder, hence thread-unsafe.

Case 1: From String to StringBuffer and StringBuilder 
 String str = "Geeks";
 StringBuffer sbr = new StringBuffer(str);
 sbr.reverse();
 // Printing the reversed string
 System.out.println(sbr);
 StringBuilder sbl = new StringBuilder(str);
 sbl.append("ForGeeks");

Case 2: From StringBuffer and StringBuilder to String 
This conversion can be performed using toString() method

StringBuffer sbr = new StringBuffer("Geeks");
StringBuilder sbdr = new StringBuilder("Hello");

String str = sbr.toString();

Case 3: From StringBuffer to StringBuilder or vice-versa

We first convert the StringBuffer/StringBuilder object to String using toString() method and then from String to StringBuilder/StringBuffer using constructors.

From the above three use-cases we can conclude out below pointers: 

Objects of String are immutable, and objects of StringBuffer and StringBuilder are mutable.
StringBuffer and StringBuilder are similar, but StringBuilder is faster and preferred over StringBuffer for the single-threaded program. If thread safety is needed, then StringBuffer is used. 