Problem Statement: Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.
 
Input: candidates = [10,1,2,7,6,1,5], target = 8

Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]]

Solution 1: Using extra space and time complexity
Before starting the recursive call make sure to sort the elements because the ans should contain the combinations in sorted order and should not be repeated.

Initially, We start with the index 0, At index 0 we have n – 1 way to pick the first element of our subsequence.

It is quite similar to CombinationSum-1 problem but the only diffrence is that in that problem we are allowed to take the same element multip[le number of times but here we are not allowed to repeat them.

Check if the current index value can be added to our ds. If yes add it to the ds and move the index by 1. while moving the index skip the consecutive repeated elements because they will form duplicate sequences.

Reduce the target by arr[i],call the recursive call for f(idx + 1,target – 1,ds,ans) after the call make sure to pop the element from the ds

if(arr[i] > target) then terminate the recursive call because there is no use to check as the array is sorted in the next recursive call the index will be moving by 1 all the elements to its right will be in increasing order.

Base Condition:
Whenever the target value is zero add the ds to the ans return.


TC:O(2^N *k)
{
since 2^N is the tc to generate all posiible subsequences.
k is the avg. length of each comb.
}
SC:O(k*x)

void findCombination(int ind,int target,vector<int> &arr,set<vector<int>> &ans,vector<int> &ds)
{
if(target==0){
ans.insert(ds);
return;
}
for(int i=ind;i<arr.size()-1;i++)
{
if(i>ind && arr[i]==arr[i-1])continue;
if(arr[i]>target)break;
ds.push_back(arr[i]);
findCombination(i,target-arr[i],arr,ans,ds);
ds.pop_back();
}
}

vector<vector<int>> combinationSum(vector<int> &arr, int target) {
      vector< vector < int >> ans;
sort(arr.begin(),arr.end());
      vector < int > ds;
      findCombination(0, target, candidates, ans, ds);
      return ans;
    }

