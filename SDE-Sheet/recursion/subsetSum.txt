Subset Sum : Sum of all Subsets
Problem Statement: Given an array print all the sum of the subset generated from it, in the increasing order.

Examples:

Example 1:

Input: N = 3, arr[] = {5,2,1}

Output: 0,1,2,3,5,6,7,8

Explanation: We have to find all the subset’s sum and print them.in this case the generated subsets are [ [], [1], [2], [2,1], [5], [5,1], [5,2]. [5,2,1],so the sums we get will be  0,1,2,3,5,6,7,8

Remember that the no. of subsets possible is 2^n.
Brute force:
To generate all the subsets(subsequences) using power set(bit manipulation technique) .TC:O(2^N *N)

Optimised appr:
Recursive approach.
TC:O(2^N)+O(2^Nlog(2^N))
O(2^N) because for every index we have couple of options either to pick or to not pick.
O(2^Nlog(2^N)) to sort ans.Size of ans is 2^N.
SC:O(2^N)

Intuition: The main idea is that on every index you have two options either to select the element to add it to your subset(pick) or not select the element at that index and move to the next index(non-pick).

Approach: Traverse through the array and for each index solve for two arrays, one where you pick the element,i.e add the element to the sum or don’t pick and move to the next element, recursively, until the base condition. Here when you reach the end of the array is the base condition.

Code:
void solve(int ind,vector<int>&arr,int n,vector<int> &ans,int sum)
{
if(ind==n)
{
ans.push_back(sum);
return;
}
//element is picked
solve(ind+1,arr,n,ans,sum+arr[ind]);
//elements is not picked
solve(ind+1,arr,n,ans,sum);
}

 vector < int > subsetSums(vector < int > arr, int n) {
    vector < int > ans;
    solve(0, arr, n, ans, 0);
sort(ans.begin(),ans.end());
    return ans;
  }