Total number of permutations: n!
Approach 1:
TC:O(!n *n)
SC:O(n)+O(n)
n which stores the DS and n for map.

Code:
void recurPermute(vector<vector<int>> &ans,vector<int> &ds,vector<int> &freq[],vector<int> &nums)
{
if(ds.size()==nums.size())
{
ans.push_back(ds);
return;
}
for(int i=0;i<nums.size();i++)
{
if(!freq[i])
{
ds.push_back(nums[i]);
freq[i]=1;
recurPermute(ans,ds,freq,nums);
ds.pop_back();
freq[i]=0;
}
}
}
vector<vector<int>> permute(vector<int> &nums)
{
vector<int>ds;
vector<vector<int>>ans;
vector<int> freq(nums.size(),0); //or int freq[nums.size()]={0}
recurPermute(ans,ds,freq,nums);
return ans;
}

Approach2:
In this we will do swaping.
We will not use extra space .
TC:O(n! * n)
SC:O(1)

void recurPermute(int ind,vector<vector<int>> &ans,vector<int> &nums)
{
if(ind==nums.size())
{
ans.push_back(nums);
return;
}
for(int i=ind;i<nums.size();i++)
{
swap(nums[i],nums[ind]);
recurPermute(ind+1,ans,nums);
swap(nums[i],nums[ind]);
}
}
vector<vector<int>> permute(vector<int> &nums)
{
vector<vector<int>>ans;
recurPermute(0,ans,nums);
return ans;
}