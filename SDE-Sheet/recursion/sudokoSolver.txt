Given a 9×9 incomplete sudoku, solve it such that it becomes valid sudoku. Valid sudoku has the following properties.
1. All the rows should be filled with numbers(1 – 9) exactly once.
2. All the columns should be filled with numbers(1 – 9) exactly once.
3. Each 3×3 submatrix should be filled with numbers(1 – 9) exactly once.
Note: Character ‘.’ indicates empty cell.

EG:


App1:
A sudoko is a 9x9 matrix which consists of 9 3x3 submatrix.
Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]

 
Rulses to fill Suduko:
1) The digit 1-9 must be filled once in every row
1) The digit 1-9 must be filled once in every column
1) The digit 1-9 must be filled once in every 3x3 submatrix.

Every time we will check the first empty cell and try ebery possible combination from 1-9 .If any no. satisfies all the above mentioned 3 conditions ,then we will call the recursive function for it.
If at any point we are not able to fill up the empty cell ,then we can say that it is not our solution.We will return false and we will do backtrack.
But if we does not find any empty cell it means that we have filled the sudoko and now we will return true. Remember when we return true we does not have to do backtrack.
Whenever we get true we will not try for remaining numbers because we just have to give 1 valid sudoko.
TC: O(9^(n^2)) in the worst case, for each cell in the n2 board, we have 9 possible numbers.
SC:O(1)

Code:
void solveSudoko(vector<vector<char>> &board)
{
solve(board);
}
bool solve(vector<vector<char>> &board)
{
for(int i=0;i<9;i++)
{
for(int j=0;j<9;j++)
{
if(board[i][j]=='.')
{
for(char c='1';c<='9';c++)
{
if(isValid(board,i,j,c))
{
board[i][j]=c;
if(solve(board))return true;
else board[i]j[]='.';
}
}
return false;
}
}
}
return true;
}

bool isValid(vector<vector<char>> &board,int row,int col,char c)
{
for(int i=0;i<9;i++)
{
if(board[i][col]==c)return false;
if(board[row][i]==c)return false;
if(board[3*(row/3)+i/3][3*(col/3)+i%3]==c)return false;
}
return true;
}

