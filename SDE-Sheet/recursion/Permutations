Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

Question: https://leetcode.com/problems/permutations/


Brute Force: Recursion + Hash Map
TC: O(N! * N)
SC: O(N)

class Solution {
// Imp note: In permutation, you have to include the ds into ans, when its length is equal to nums.length
    public void f(List<Integer> ds, List<List<Integer>> ans, boolean []freq, int []nums)
    {
        int n = nums.length;
        if(ds.size()== n)
        {
            // remember to add a new copy of ds, other wise when you will change ds, it will also get changed in ans 
            ans.add(new ArrayList<>(ds));
            return;
        }
// we will run a loop from 0 to n-1 ans and check if it is present in map, if not we will consider it 
        for(int i=0;i<n;i++)
        {
            if(!freq[i])
            {
                ds.add(nums[i]);
                freq[i]= true;
                f(ds,ans,freq,nums);
                freq[i]=false;
                ds.remove(ds.size()-1);
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans= new ArrayList<>();
        List<Integer> ds=new ArrayList<>();
        boolean freq[] = new boolean[nums.length];
        f(ds,ans,freq,nums);
        return ans;
    }
}

Optimised App: Recursion
TC: O(N!*N)
SC: O(N)
In this app, we will do swap, 
We will swap from the coming index till n-1 index

class Solution {
// Imp note: In permutation, you have to include the ds into ans, when its length is equal to nums.length
    public void f(int ind, List<List<Integer>> ans, int []nums)
    {
        int n = nums.length;
        //base case
        if(ind == n)
        {
            List<Integer> ds=new ArrayList<>();
            for(Integer it: nums)
            {
                ds.add(it);
            }
            ans.add(ds);
        }
// we will run a loop from 0 to n-1 ans and check if it is present in map, if not we will consider it 
        for(int i=ind;i<n;i++)
        {
            swap(i,ind,nums);
            f(ind+1,ans,nums);
            swap(i,ind,nums);
        }
    }
    public void swap(int i,int j, int []nums)
    {
        int t= nums[i];
        nums[i] = nums[j];
        nums[j]= t;
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans= new ArrayList<>();
        // we will start from 0 index and we will do swapping between 0->0 , 0->1, 0->2 (when n=3)
        // then in the next recursion call we will 1->1, 1-> 2
        //then 2->2
        f(0,ans,nums);
        return ans;
    }
}
