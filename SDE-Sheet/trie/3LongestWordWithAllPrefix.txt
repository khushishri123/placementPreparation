A string is called a complete string if every prefix of this string is also  present in the array 'A' .Ninja is challenged to find the longest complete string in the array 'A'. If there are multiple strings with the same length ,return the lexicographically smallest one and if no string exists ,return "None".



#include <bits/stdc++.h> 
struct Node
{
  Node * links[26];
    bool flag=false;
    bool containsKey(char ch)
    {
        return (links[ch-'a']!=NULL);
    }
    void put(char ch,Node *node)
    {
        links[ch-'a']=node;
    }
    Node * get(char ch)
    {
        return links[ch-'a'];
    }
    void setEnd()
    {
        flag=true;
    }
    bool isEnd()
    {
        return flag;
    }
};

class Trie
{
    private: 
    Node * root;
    public:
    Trie()
    {
        root=new Node();
    }
    void insert(string &word)
    {
        Node *node=root;
        for(int i=0;i<word.length();i++)
        {
            if(!node->containsKey(word[i]))
            {
               node->put(word[i],new Node());
            }
            node=node->get(word[i]);
        }
        node->setEnd();
    }
    bool checkIfPrefixExists(string word)
    {
        Node *node=root;
        for(int i=0;i<word.length();i++)
        {
            if(node->containsKey(word[i]))
            {
                node=node->get(word[i]);
                if(node->isEnd()==false)return false;
            }
            else return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie trie;
    for(auto &it:a)trie.insert(it);
   string longest="";
    for(auto &it:a)
    {
        //now we will check that whether this string conatins all prefixes
        if(trie.checkIfPrefixExists(it))
        {
            if(it.length()>longest.length())
            {
                longest=it;
            }
            else if(it.length()==longest.length() && it<longest) longest=it;
        }
    }
    
    if(longest=="")return "None";
   
    return longest;
}