This question is quite similar to 6MaximumXOR .The only difference is that we are given a single array and we have to find out which one gives us maximum XOR.


Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127

class Solution {
public:
        struct Node
        {
                Node *links[2];
                bool containsKey(int bit)
                {
                        return (links[bit]!=NULL);
                }
                void put(int bit,Node *node)
                {
                        links[bit]=node;
                }
                Node * get(int bit)
                {
                        return links[bit];
                }
        };
        class Trie
        {
                private:
                Node *root;
                public:
                Trie()
                {
                        root=new Node();
                }
                void insert(int num)
                {
                        Node *node=root;
                        //we have to traverse from the left side i.e from the 31st bit
                        for(int i=31;i>=0;i--)
                        {
                 int bit=(num>>i)&1;
                                if(!node->containsKey(bit))
                                {
                                       node->put(bit,new Node());
                                }
                                node=node->get(bit);
                        }
                }
                int getMax(int num)
                {
                        Node *node=root;
                        int maxi=0;
                        for(int i=31;i>=0;i--)
                        {
                                int bit=(num>>i)&1;
                                if(!node->containsKey(1-bit))
                                {
                                        node=node->get(bit);
                                }
                                else
                                {
                                        maxi=maxi | (1<<i);
                                        node=node->get(1-bit);
                                }
                        }
                        return maxi;
                }
                        
        };
    int findMaximumXOR(vector<int>& nums) {
            int n=nums.size();
            int maxi=0;
            Trie trie;
            for(int i=0;i<n;i++)
            {
                    trie.insert(nums[i]);
                       maxi=max(maxi,trie.getMax(nums[i]));     
            }
            return maxi;
    }
};
