You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].

The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.

Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.
2) 1 XOR 2 = 3.
3) 5 XOR 2 = 7.

Brute Force:
for(int i=0;i<queries.size();i++)
{
xi=queries[i][0];
mi=queries[i][1];
maxXOR=-1;
for(int j=0;j<n;j++)
{
if(arr[j]<=mi)
{
maxXOR=max(maxXor,arr[j]^xi);
}
}
ans[i]=maxXOR;
}
return ans;

TC:O(Q*N)

Optimised App:
We will use trie.
Trie will contain only those elements that are lesser than or equal to mi.Then we can simply give xi and find max.
Online queries: It means to solve first query and store ans and similarly line wise solve rest of the queries .
Offline Queries:
Let arr[]={1,3,2,5,4}
Queries:
{3,4}->0 index
{5,2}->1 index
{2,5}->2 index
{3,1}->3 index

We will sort queries on the basis of mi.
{3,1},3  ->let ans be x
{5,2},1  -> y
{3,4},0  ->z
{2,5},2  ->r

ans array will contain:
z y r x
0 1 2 3 

We will maintain the query no.
Now to solve 1st query ,we want numbers <=1
So we will sort our arr.
arr[]={1,2,3,4}

We will start from the first element, we see that 1<=1
So we will insert 1 in our trie.
Then 2 is not less than 1 in our trie.
So we will stand there we will solve it.Then repeat the same process.

TC:O(q*log(q))+O(q*32+n*32)

class Solution {
public:
        struct Node 
        {
          Node *links[2];
                bool containsKey(int bit)
                {
                        return (links[bit]!=NULL);
                }
                void put(int bit,Node *node)
                {
                        links[bit]=node;
                }
                Node * get(int bit)
                {
                        return links[bit];
                }
        };
        class Trie
        {
                private :
                Node *root;
                public:
                Trie()
                {
                        root=new Node();
                }
                void insert(int num)
                {
                        Node *node=root;
                        for(int i=31;i>=0;i--)
                        {
                        int bit=(num>>i)&1;
                                if(!node->containsKey(bit))
                                {
                                        node->put(bit,new Node());
                                }
                                node=node->get(bit);
                        }
                }
                int findMaxXOR(int num)
                {
                        int maxi=0;
                        Node *node=root;
                        for(int i=31;i>=0;i--)
                        {
                                int bit=(num>>i)&1;
                                if(!node->containsKey(1-bit))
                                {
                                        node=node->get(bit);
                                }
                                else
                                {
                                        maxi=maxi | (1<<i);
                                        node=node->get(1-bit);
                                }
                        }
                        return maxi;
                }
        };
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        //oQ stands for offline queries
            vector<pair<int,pair<int,int>>> oQ;
            int q=queries.size();
            for(int i=0;i<q;i++)
            {
                    oQ.push_back({queries[i][1],{queries[i][0],i}});
            }
            //sorting queries on the basis of mi
            sort(oQ.begin(),oQ.end());
            //sorting nums
            sort(nums.begin(),nums.end());
            int ind=0;
            int n=nums.size();
            Trie trie;
            vector<int> ans(q,0);
            for(int i=0;i<q;i++)
            {
                    int mi=oQ[i].first;
                    int xi=oQ[i].second.first;
                    int queryInd=oQ[i].second.second;
                    
                    while(ind<n && nums[ind]<=mi)
                    {
                      trie.insert(nums[ind]);      
                            ind++;
                    }
                    if(ind==0)ans[queryInd]=-1;
                    else ans[queryInd]=trie.findMaxXOR(xi);
            }
            return ans;
    }
};