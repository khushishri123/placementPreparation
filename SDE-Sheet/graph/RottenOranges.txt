You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

We will perform BFS to count the total days.See the manner in which we performed BFS and whether all oranges will rott or not?

int oranges(vector<vector<int>> &grid)
{
if(grid.size()==0)return 0;
int day=0;
int count=0;
int total=0;
int n=grid.size();
int m=grid[0].size();
//to traverse in all 4 directions we will apply a trick
//we will use 2 arrays
int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};
int i,j,nx,ny,x,y;
//we will require a queue in which I will puish all the rotten oranges
queue<<pair<int,int>> q;
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
if(grid[i][j]==1)total++;
if(grid[i][j]==2)q.push({i,j});
}
}

while(!q.empty())
{
int k=q.size();
count+=k;
while(k--)
{
x=q.front().first;
y=q.front().second;
for(i=0;i<4;i++)
{
nx=x+dx[i];
ny=y+dy[i];
if(nx<0 || nx>=n || ny<0 || ny>=m)continue;
grid[nx][ny]=2;
q.push({nx,ny});
}
}
if(!q.empty())days++;
}
}