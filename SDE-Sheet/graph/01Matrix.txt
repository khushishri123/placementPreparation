Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1.

Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]

We will use BFS traversal. If we use DFS ,then we will get wrong ans.

Code:
 vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        vector<vector<int>> dist(n,vector<int>(m,0));
        vector<vector<int>> vis(n,vector<int>(m,0));
        int dx[4]={-1,0,1,0};
        int dy[4]={0,1,0,-1};
        queue<pair<pair<int,int>,int>> q;
        //Initially push all the cells that have 0  and there distance //will be 0.
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]==0)
                {
                    vis[i][j]=1;
                    q.push({{i,j},0});
                }
                else vis[i][j]=0;
            }
        }
        //Now traversing 
        while(!q.empty())
        {
            int row=q.front().first.first;
            int col=q.front().first.second;
            int steps=q.front().second;
            q.pop();
            dist[row][col]=steps;
            for(int i=0;i<4;i++)
            {
                int nx=dx[i]+row;
                int ny=dy[i]+col;
                if(nx>=0 && ny>=0 && nx<n && ny<m && vis[nx][ny]==0)
                {
                    vis[nx][ny]=1;
                    q.push({{nx,ny},steps+1});
                }
            }
        }
        return dist;
    }

 