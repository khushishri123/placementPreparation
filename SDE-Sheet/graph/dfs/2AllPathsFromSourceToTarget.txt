Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

class Solution {
public:
     vector<vector<int>> ans;
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& G) {
        vector<int> path;
        dfs(G, 0, path);
        return ans;
    }
    void dfs(vector<vector<int>>& G, int i, vector<int>& path) {
        path.push_back(i);                            // add current node to path
        if(i == size(G)-1) ans.push_back(path);       // valid path found
        else 
            for(auto child : G[i])  
                dfs(G, child, path);                  // recurse for every possible next node in path
        path.pop_back();                              // backtrack
    }
};