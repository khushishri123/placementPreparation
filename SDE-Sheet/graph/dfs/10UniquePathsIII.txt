You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.

Code:
You have started the empty as 1 because you are calling the dfs function either for 0 or for 2.So, when you are calling for 2 also,you are incrementing the value by 1.But empty shows the count of only 0's.So we are statring empty as 1.


class Solution {
public:
int res=0;
int empty=1; //empty shows the count 0's
void dfs(int i,int j,vector<vector<int>>& grid,int count)
{
    if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]==-1)return;

    if(grid[i][j]==2)
    {
        //if the count of 0 is equal to empty,then increment res
        if(count==empty)res++;
        return;
    }
 //marking grid[i][j] as vis by making grid[i][j]=-1
 grid[i][j]=-1;
    dfs(i-1,j,grid,count+1);
    dfs(i+1,j,grid,count+1);
    dfs(i,j-1,grid,count+1);
    dfs(i,j+1,grid,count+1);
    //backtarck
    grid[i][j]=0;
}

    int uniquePathsIII(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int x;
        int y;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==0)empty++;
                else if(grid[i][j]==1) x=i,y=j;
            }
        }
        //initially the count of 0's is 0
    dfs(x,y,grid,0);
       return res;
    }
};