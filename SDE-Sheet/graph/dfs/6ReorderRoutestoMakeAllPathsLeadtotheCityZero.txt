There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

 

Example 1:


Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 2:


Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 3:

Input: n = 3, connections = [[1,0],[2,0]]
Output: 0

For more explanation ,see video:
https://www.youtube.com/watch?v=m17yOR5_PpI

class Solution {
public:
        void dfs(int node,set<pair<int,int>> &s,map<int,vector<int>> &m,vector<bool> &vis,int &change)
        {
                //traverse over its adjacent
                for(auto it:m[node])
                {
                        if(!vis[it])
                        {
                        //if there is outgoing edge then we have to increment the value of count else not 
                                //node is our parent and if there is an edge from parent to child then we have to change its orientation.
                        if(s.find({node,it})!= s.end()) change++;
                         vis[it]=true;
                                dfs(it,s,m,vis,change);
                        }
                }
        }
    int minReorder(int n, vector<vector<int>>& connections) {
        set<pair<int,int>> s;
            //in the set we will store that what are the actual edges
            for(auto it:connections)
            {
                    s.insert({it[0],it[1]});
            }
            map<int,vector<int>> m;
            //in map we will consider that he edged are bidirectional.
            for(auto it:connections)
            {
                    m[it[0]].push_back(it[1]);
                    m[it[1]].push_back(it[0]);
            }
            vector<bool> vis(n,false);
            vis[0]=true;
            int change=0;
            dfs(0,s,m,vis,change);
            return change;
    }
};