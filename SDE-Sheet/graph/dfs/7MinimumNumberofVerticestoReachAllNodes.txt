Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].
Example 2:



Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.

Idea: First we will do topo sort and then we will perform dfs.

class Solution {
public:
        void topoSort(int node,vector<int> adj[],vector<int> &vis,stack<int> &st)
        {
         vis[node]=1;
                for(auto it:adj[node])
                {
                      if(!vis[it])  topoSort(it,adj,vis,st);
                }
                st.push(node);
        }
        void dfs(int node,vector<int> adj[],vector<int> &vis)
        {
                vis[node]=1;
                for(auto it:adj[node])
                {
                        if(!vis[it])
                        {
                                dfs(it,adj,vis);
                        }
                }
        }
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
            vector<int> adj[n];
            for(auto it:edges)
            {
                    adj[it[0]].push_back(it[1]);
            }
            //we will use the concept of Topo Sort and then we will perform DFS.
        vector<int> ans;
            vector<int> vis(n,0);
            stack<int> st;
            
            for(int i=0;i<n;i++)
            {
                    if(!vis[i])
                    {
                            
                            topoSort(i,adj,vis,st);
                    }
            }
            
            for(int i=0;i<n;i++) vis[i]=0;
            while(!st.empty())
            {
                    int node=st.top();
                    st.pop();
                    if(!vis[node])
                    {
                            ans.push_back(node);
                            dfs(node,adj,vis);
                    }
            }
            return ans;
    }
};