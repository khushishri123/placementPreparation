We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false


class Solution {
public:
        bool dfs(int node,vector<int> adj[],vector<int> &color)
        {
                for(auto it:adj[node])
                {
                        if(color[it]==-1)
                        {
                                color[it]=1-color[node];
                                if(!dfs(it,adj,color))return false;
                        }
                        else
                        {
                                if(color[it]==color[node])return false;
                        }
                }
                return true;
        }
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        //we will use concept of bipartitte graph
//Bipartite graph means we are able to color adjacent nodes with exactly to different colors then we will say that graph is bipartite
            vector<int> adj[n+1];
            for(auto it:dislikes)
            {
                    adj[it[0]].push_back(it[1]);
                    adj[it[1]].push_back(it[0]);
            }
            vector<int> color(n+1,-1);
            for(int i=1;i<=n;i++)
            {
             if(color[i]==-1)
             {
                    color[i]=1;
                     if(!dfs(i,adj,color)) return false;  
             }
            }
            return true;
    }
};