There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.

 

Example 1:



Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.
Example 2:



Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads that are connected to cities 1 or 2.

Code: 
class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
    vector<int> adj[n];   
            map<int,int> m;
//we will store freq of roads that are directly connected to a node in map
            for(auto it:roads)
            {
                    adj[it[0]].push_back(it[1]);
                    adj[it[1]].push_back(it[0]);
                    m[it[0]]++;
                    m[it[1]]++;
            }
            int ans=0;
            for(int i=0;i<n;i++)
            {
                    for(int j=0; j!=i && j<n;j++)
                    {
                            int count=0;
//if there is a direct edge between i and j ,then we have to count only //once but since we are adding m[i] and m[j]   that road will be counted //twice that's why we are subtracting 1, else we will simply add.
                   if(find(adj[i].begin(),adj[i].end(),j)!=adj[i].end())
                            {
                                    count=m[i]+m[j]-1;
                            }
                            else count=m[i]+m[j];
                            ans=max(ans,count);
                    }
            }
            return ans;
    }
};