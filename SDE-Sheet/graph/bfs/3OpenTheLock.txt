You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.

The lock initially starts at '0000', a string representing the state of the 4 wheels.

You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.

 

Example 1:

Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202"
Output: 6
Explanation: 
A sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".
Note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,
because the wheels of the lock become stuck after the display becomes the dead end "0102".
Example 2:

Input: deadends = ["8888"], target = "0009"
Output: 1
Explanation: We can turn the last wheel in reverse to move from "0000" -> "0009".
Example 3:

Input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
Output: -1
Explanation: We cannot reach the target without getting stuck.
 

✔️ Solution - I (BFS)

First, let's simplify the problem statement. We are given a string start = "0000" and asked to reach target by turning (minimum times) a digit forward or backward one at a time without reaching any of the strings in deadends.

We can't just turn a digit forward or backward just based on which turn gets us quicker to the corresponding digit of target faster because this approach may lead us towards a deadend. So, it makes sense to try and turn a digit in both the direction and return the one that leads to target in minimum moves.

The solution can be modelled as a BFS traversal, wherein we try to shift each digit of current string curstr in both the possible direction. We increment turns at each level of BFS and return when target is reached during the traversal.

We use a hashset to insert all the deadends string for efficient check on whether we reach a deadend at anytime. Similarly, we store all the visited string in visited to ensure that we won't revisit a string again. For BFS traversal, we would also require to maintain a queue. The algorithm can be summed up into following steps:-

Insert all strings from deadends into a hashset and also maintain a visited set for all strings traversed so far.
Start BFS traversal from "0000" by pushing it into the queue and looping till the queue becomes empty.
At each level of BFS, take the current string and try turning each digit in both forward & backward direction. For eg. we can apply the turning process on "0000" to get ["1000", "9000", "0100", "0900", "0010", "0090", "0001", "0009"].
If any of the strings after applying turning process become equal to target, return the turns required till now.
Else, just push the turned strings into the queue, insert it into visited set and repeat the same process for all strings in the queue.
If the queue becomes empty, we have tried all possible paths to reach target and failed. So return -1.

Time Complexity : O(N), where N is the number of strings in deadends and O(N) is required to insert all the strings into the hashset. The BFS traversal requires O(1). It may be strange but that's how you calculate big O complexity. The time required by our BFS traversal doesn't depend on the input and in the worst case, we end up making 10000 iterations at max. Please let me know if there's any mistake in this analysis

Space Complexity : O(N)

Code:

int openLock(vector<string>& deadends, string target) {
unordered_set<string> dead(begin(deadends), end(deadends)),seen({"0000"});
	if(dead.find("0000") != end(dead)) return -1; // if start string itself is a deadend
	if(target == "0000") return 0; // if start string itself is the target string.
	queue<string> q({"0000"});
	int n, minTurns = 0;
	while(!q.empty()) {            
		n = size(q), minTurns++;
		for(int i = 0; i < n; i++) { // traversing all nodes on the current level of BFS traversal
			auto cur_str = q.front(); q.pop();       
			// Trying forward and backward turn for each digit of current string
			for(int j = 0; j < 4; j++) 
				for(auto adj_str : turn(cur_str, j)) 
					if(seen.find(adj_str) == end(seen) && dead.find(adj_str) == end(dead)) // adjacent (turned) string is not visited earlier, nor a dead end
						if(adj_str == target) return minTurns;
						else q.push(adj_str), seen.insert(adj_str);
		}
	}
	return -1;
}
// turns the ith digit of s in forward and backward direction and returns the turned string as vector
vector<string> turn(string s, int i) {
	vector<string> res(2, s);
	res[0][i] = '0' + (res[0][i] - '0' + 1) % 10;        // forward turn
	res[1][i] = '0' + (res[1][i] - '0' - 1 + 10) % 10;   // backward turn
	return res;
}
