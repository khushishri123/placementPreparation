This question is little bit changed in gfg and leetcode.
In gfg we have to consider all 8 directions as our adjacent but in leetcode only horizontal and vertical are considered as adjacent

Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

We will use BFS or DFS .Now we are using BFS .
See how we have generated all 8 directions by using 2 loops since my row and col are differing from -1 to +1 .
Also we will do bfs when grid[i][j]=='1'


Code:
 void bfs(int i,int j,vector<vector<char>> &grid,vector<vector<int>> &vis)
    {
        int n=grid.size();
        int m=grid[0].size();
        vis[i][j]=1;
        queue<pair<int,int>> q;
        q.push({i,j});
        while(!q.empty())
        {
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            //now we want to get all possible neighbours
            //our row and col are differing by -1 to +1
            
            for(int dx=-1;dx<=1;dx++)
            {
                for(int dy=-1;dy<=1;dy++)
                {
                    int nrow=dx+row;
                    int ncol=dy+col;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==
                       '1' && !vis[nrow][ncol])
                    {
                        q.push({nrow,ncol});
                        vis[nrow][ncol]=1;
                    }
                }
            }
        }
    }
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]=='1')
                {
                    count++;
                    bfs(i,j,grid,vis);
                }
            }
        }
        return count;
    }