On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.
Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.


Here we will use the concept of DisjointSet and Union.

class Solution {
public:
//we will use the concept of graph and union
vector<int> parent;
int findPar(int node)
{
    if(parent[node]==node)return node;
    return parent[node]=findPar(parent[node]);
}
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        parent.resize(n,0);
         // at the beginning, each element is the parent of itself.
        for(int i=0;i<n;i++)parent[i]=i;
        // iterate each pair
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                 // if two stones shares the same row or the same column,
           //here stones[i][0] and stones[j][0] represents the row and
                 //stones[i][1] and stones[j][1] represents the column
       if(stones[i][0]==stones[j][0] || stones[i][1]==stones[j][1])
                {
                     // get the root of `i`
                    int a=findPar(i);
                     // get the root of 'j'
                    int b=findPar(j);
          // if they don't belong to the same group, unite them together
                    if(a!=b)parent[a]=parent[b];
                }
            }
        }
        int connected=0;
           // if `i` is the root, then we found a new connected component
        for(int i=0;i<n;i++)
        {
            connected+= parent[i]==i;
        }
        // the max number of stones that can be removed is simply
        // the total count - the number of the connected components
        return n-connected;
    }
};