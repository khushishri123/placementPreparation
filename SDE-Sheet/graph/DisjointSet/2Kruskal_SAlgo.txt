This algo heapls us to find MST.Initailly we will sort the edges on the bases of their weight.
After sorting let our edges be:
(wt,u,v)
(1,1,4)
(2,1,2)
(3,2,3)
(3,2,4)
(4,1,5)
(5,3,4)
(7,2,6)
(8,3,6)
(9,4,5)

We will requires size and parent array. You can also do this with unionByRank method.
Whenever there ultimate parent are diffrent we will create an edge between them and add it to mstSum(Minimum Spanning Tree sum). But if they have same ultimate parent then we will jot do anything.
Rememeber firstly we have to check that whether u and v have same ultimate parent? If they don't have then add it to weight and call unionBySize to create an edge b/w u and v.
Code:

SC:O(M)+O(M)+O(M)
class DisjointSet
{
vector<int> size,parent;
public:
DisjointSet(int n)
{
size.resize(n,1);
parent.resize(n);
for(int i=0;i<n;i++)parent[i]=i;
}
int findPar(int node)
{
if(parent[node]==node)return node;
return parent[node]=findPar(parent[node]);
}
void unionBySize(int u,int v)
{
int pu=findPar(u);
int pv=findPar(v);
if(size[pu]<size[pv])
{
parent[pu]=pv;
size[pv]+=size[pu];
}
else
{
parent[pv]=pu;
size[pu]+=size[pv];
}
}
};
int findMST(int V,vector<vector<int>> adj[])
{
vector<pair<int,pair<int,int>>> edges;
//O(N+E)
for(int i=0;i<V;i++)
{
for(auto it:adj[i])
{
int node=i;
int adjNode=it[0];
int wt=it[1];
edges.push_back({wt,{node,adjNode}});
}
}
int mst=0;
DisjointSet d(V);
//MlogM
sort(edges.begin(),edges.end()); //sorting on the basis of wt
//M*4*alpha*2
for(auto it:edges)
{
int wt=it.first;
int u=it.second.first;
int v=it.second.second;
if(d.findPar(u)!=d.findPar(v))
{
mst+=wt;
d.unionBySize(u,v);
}
}
return mst;
}