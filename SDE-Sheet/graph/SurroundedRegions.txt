Given a matrix mat of size N x M where every element is either ‘O’ or ‘X’.
Replace all ‘O’ with ‘X’ that are surrounded by ‘X’.
A ‘O’ (or a set of ‘O’) is considered to be by surrounded by ‘X’ if there are ‘X’ at locations just below, just above, just left and just right of it.
Example 1:
Input: n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: ans = {{'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'X', 'X'}, 
               {'X', 'X', 'O', 'O'}}


Key observation:
The O's connected to the boundary cannot be converted to X and the O's that are connected to the 'O' that is at boundary cannot be converted to X.
Else all the 'O' can be converted to X.

Algo:
1) Start from the boundary 'O' .Remember there can be multiple 'O' lying on the boundary and mark  that they cannot be converted.
{Since all the 'O' connected to the boundary 'O' cannot be converted}

2) Convert the remaining 'O' into 'X'.


TC:O(N)+O(N)+O(N*M)*4 =O(N*M)
O(N)+O(N) for traversing boundary copule of times
O(N*M) because at max dfs can run for all the elements and 
*4 because we are traversing adjacent boundary.

SC:O(N*M)

Code:
void dfs(int row,int col,int n,int m,vector<vector<char>> &mat,vector<vector<int>> &vis)
{
    vis[row][col]=1;
    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    for(int i=0;i<4;i++)
    {
        int nx=dx[i]+row;
        int ny=dy[i]+col;
        if(nx>=0 && nx<n && ny>=0 && ny<m && !vis[nx][ny] && mat[nx][ny]=='O')
        {
            dfs(nx,ny,n,m,mat,vis);
        }
    }
}
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
       vector<vector<int>> vis(n,vector<int>(m,0));
       //I will call dfs  for all boundary 'O'
       //tarversing first col
       for(int i=0;i<n;i++)
       {
           if(mat[i][0]=='O') dfs(i,0,n,m,mat,vis);
       }
       //traversing last col
       for(int i=0;i<n;i++)
       {
           if(!vis[i][m-1] && mat[i][m-1]=='O')dfs(i,m-1,n,m,mat,vis);
       }
       //traversing left to right first row
       for(int j=0;j<m;j++)
       {
           if(!vis[0][j] && mat[0][j]=='O') dfs(0,j,n,m,mat,vis);
       }
       //traversing left to right last row
       for(int j=0;j<m;j++)
       {
           if(!vis[n-1][j] && mat[n-1][j]=='O')dfs(n-1,j,n,m,mat,vis);
       }
       vector<vector<char>> ans(n,vector<char>(m));
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(vis[i][j]==1)ans[i][j]='O';
               else ans[i][j]='X';
           }
       }
       return ans;
    }