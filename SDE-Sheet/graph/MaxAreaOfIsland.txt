You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0

Do not apply BFS.

int dfs(int i,int j,int n,int m,vector<vector<int>> &grid,vector<vector<int>> &vis)
        {
                if(i<0 || j<0 || i>=n || j>=m || grid[i][j]==0 || vis[i][j]==1)return 0;
                vis[i][j]=1;
                return (1+ dfs(i-1,j,n,m,grid,vis) + dfs(i,j+1,n,m,grid,vis) + dfs(i+1,j,n,m,grid,vis) + dfs(i,j-1,n,m,grid,vis));
        }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        //Remember in this question we cannpt apply BFS ,we will get stuck
            //We will apply DFS
            int n=grid.size();
            int m=grid[0].size();
            vector<vector<int>> vis(n,vector<int>(m,0));
            int ans=0;
            for(int i=0;i<n;i++)
            {
                    for(int j=0;j<m;j++)
                    {
                            if(!vis[i][j])
                            {
                             ans=max(ans,dfs(i,j,n,m,grid,vis));       
                            }
                    }
            }
            return ans;
    }