You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
Return the minimum effort required to travel from the top-left cell to the bottom-right cell.
Example 1:
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.

App:
Whenever we have to find minimum path,shortest path,or something related to path , we wil use Dijkstra's algo.
Now in the min heap PQ we will put{diff ,row ,col} we are putting difference because we want min. diff everytime
And a dist array-> dist[][]

IN the distance array mark everyone with infinity except source.
Push: {0,0,0}
For a path ,effort will be always recogized as  the max of all diff 

Pop-> 0,0,0
Iterate on all possible directions.

TC:ElogV = (n*m*4)*log(n*m)
Since there are n*m cells and for each cell we are traversing at max 4 directions and V=n*m,
SC:O(n*m)

Code:

#define pp pair<int,pair<int,int>>
class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
         int n=heights.size();
            int m=heights[0].size();
           vector<vector<int>> dist(n,vector<int> (m,1e9));
            priority_queue<pp,vector<pp>,greater<pp>> pq;
            int dx[]={-1,0,1,0};
            int dy[]={0,1,0,-1};
            dist[0][0]=0;
            pq.push({0,{0,0}});
            while(!pq.empty())
            {
                    auto it=pq.top();
                    pq.pop();
                    int effort=it.first;
                    int x=it.second.first;
                    int y=it.second.second;
                 if(x==n-1 && y==m-1)return effort;
                    for(int i=0;i<4;i++)
                    {
                            int nx=dx[i]+x;
                            int ny=dy[i]+y;
                            if(nx>=0 && ny>=0 && nx<n && ny<m)
                            {
        int newEffort=max(abs(heights[nx][ny]-heights[x][y]),effort);
                                    
                                    if(newEffort<dist[nx][ny])
                                    {
                                      dist[nx][ny]=newEffort;
                                            pq.push({newEffort,{nx,ny}});
                                    }
                            }
                    }
            }
            return 0;
    }
};
