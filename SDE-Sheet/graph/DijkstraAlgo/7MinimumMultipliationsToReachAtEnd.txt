Given start, end and an array arr of n numbers. At each step, start is multiplied with any number in the array and then mod operation with 100000 is done to get the new start.

Your task is to find the minimum steps in which end can be achieved starting from start. If it is not possible to reach end, then return -1.

Example 1:

Input:
arr[] = {2, 5, 7}
start = 3, end = 30
Output:
2
Explanation:
Step 1: 3*2 = 6 % 100000 = 6 
Step 2: 6*5 = 30 % 100000 = 30
Example 2:

Input:
arr[] = {3, 4, 65}
start = 7, end = 66175
Output:
4
Explanation:
Step 1: 7*3 = 21 % 100000 = 21 
Step 2: 21*3 = 6 % 100000 = 63 
Step 3: 63*65 = 4095 % 100000 = 4095 
Step 4: 4095*65 = 266175 % 100000 = 66175

App:
We will use Dij. Algo. .Here the size of distance array will be 100000 becuase if multiplication goes beyond 100000 ,then since we are taking mode,it again comoes under the range of 0 to 9999 .So the size of distance array will be 100000.
Also we can multiply start with any number present in the array ,so we will run a loop for it.
Here also we does not require to maintain a PQ because the distance or number of steps are always incresing by 1 whenever we are doing multiplication.So we will push inside the queue in this order:
{node,steps}

TC:O(100000 * len(arr))

Code:

int minimumMultiplications(vector<int>& arr, int start, int end) {
        // code here
        //This question is based on Dijk. Algo.
        //But here we does not require to maintain a PQ , 
        //even if we use queue our work is done
        //in queue we will push as {node,dist}
     vector<int> dist(100000,1e9);
     queue<pair<int,int>> q;
     dist[start]=0;
     q.push({start,0});
     int mod=100000;
     while(!q.empty())
     {
         int node=q.front().first;
         int steps=q.front().second;
         q.pop();
         
         for(auto it:arr)
         {
             int num=(node*it)%mod;
             if(steps+1 < dist[num])
             {
                 dist[num]=steps+1;
                  if(num==end)return steps+1;
                 q.push({num,dist[num]});
             }
         }
         
     }
     return -1;
    }