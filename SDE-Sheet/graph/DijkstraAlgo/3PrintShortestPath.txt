You are given a weighted undirected graph having n vertices and m edges describing there are edges between a to b with some weight, find the shortest path between the vertex 1 and the vertex n and if path does not exist then return a list consisting of only -1.

Example:
Input:
n = 5, m= 6
edges = [[1,2,2], [2,5,5], [2,3,4], [1,4,1],[4,3,3],[3,5,1]]
Output:
1 4 3 5
Explaination:
Shortest path from 1 to n is by the path 1 4 3 5


We will try to remember from where we are coming from to get the path.We will use memoization.Be have to backtrack the path.
This time along with PQ and dist array we will maintain a parent array which will initially store index. This parent array will tell mw from where I am coming from.
Remember that whenever we have to backtrack we will store the parent value in some array,so as to know from where we are coming from.

Code:
public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        vector<pair<int,int>> adj[n+1];
        for(int i=0;i<n;i++)
        {
                int node=edges[i][0];
                int adjNode=edges[i][1];
                int weight=edges[i][2];
                adj[node].push_back({adjNode,weight});
                adj[adjNode].push_back({node,weight});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> parent(n+1);
        vector<int> dist(n+1,1e9);
        for(int i=0;i<=n;i++) parent[i] = i;
        pq.push({0,1});
        dist[1]=0;
        //TC:O(ElogV)
        while(!pq.empty())
        {
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {
                int adjNode=it.first;
                int wt=it.second;
                if(dis+wt < dist[adjNode])
                {
                    dist[adjNode]=dis+wt;
                    parent[adjNode]=node;
                    pq.push({dist[adjNode],adjNode});
                }
            }
        }
        if(dist[n]==1e9)return {-1};
        vector<int> ans;
        int i=n;
        //TC:O(V)
        while(i!=parent[i])
        {
            ans.push_back(i);
            i=parent[i];
        }
        ans.push_back(i);
       reverse(ans.begin(),ans.end());
        return ans;
    }