Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

#define pp pair<int,pair<int,int>> 
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
      int n=grid.size();
            if(grid[0][0]==1)return -1;
               priority_queue<pp,vector<pp>,greater<pp>> pq;
            vector<vector<int>> dis(n,vector<int>(n,1e9));
            dis[0][0]=1;
            pq.push({1,{0,0}});
            
            int dx[]={-1,0,1};
            int dy[]={-1,0,1};
            
            while(!pq.empty())
            {
            int dist=pq.top().first;
int x=pq.top().second.first;
int y=pq.top().second.second;
                    pq.pop();
                    
                    for(int i=0;i<=2;i++)
                    {
                            for(int j=0;j<=2;j++)
                            {
                                    int nx=x+dx[i];
                                    int ny=y+dy[j];
if(nx<0 || ny<0 || nx>=n || ny>=n || grid[nx][ny]==1)continue;
                                    if(dis[nx][ny]>dist+1)
                                    {
                                            dis[nx][ny]=dist+1;
         pq.push({dis[nx][ny],{nx,ny}});
                                    }
                            }
                    }
            }
           
            if(dis[n-1][n-1]!=1e9)return dis[n-1][n-1];
            return -1;
    } 