Problem Statement: Given an array of integers nums[] and an integer target, return indices of the two numbers such that their sum is equal to the target.

Note: Assume that there is exactly one solution, and you are not allowed to use the same element twice. Example: If target is equal to 6 and num[1] = 3, then nums[1] + nums[1] = target is not a solution.

Example 1:

Input: nums = [2,7,11,15], target = 9

Output: [0,1]

Explanation: Because nums[0] + nums[1] == 9, which is the required target, we return indexes [0,1]. (0-based indexing)

Brute Force:
	TC:O(n^2) SC:O(1)
vector<int> twoSum(vector<int> &nums,int target)
{
vector<int> ans;
int i,j;
int n=nums.size();
for(i=0;i<n-1;i++)
{
for(j=i+1;j<n;j++)
{
if(nums[i]+nums[j]==target)
{
ans.push_back(i);
ans.push_back(j);
break;
}
}
if(ans.size()==2)break;
}
return ans;
}

Better:Two-Pointer Approach

Intuition: Think about, what if the array is sorted? If the array is sorted, is it possible to reach a sum by traversing the array from both sides simultaneously?

We sort the array, use two variables, each will start from one end of the array, and traverse in both directions till we get the required sum.

Approach: We traverse through the array, and for each element i, we try to find another element amongst the remaining elements, such that the sum of both the elements equals the target. 

First Element: i

So the required second element will be, target – i
If we find both the elements, we break the loop and return the indices.

TC:O(NlogN+N)
SC:O(1)

vector<int> twoSum(vector<int> &nums,int target)
{
int low,high;
vector<int> ans;
low=0;
high=nums.size()-1;
sort(nums.begin(),nums.end());
while(low<high)
{
if(nums[low]+nums[high]==target)
{
ans.push_back(low);
ans.push_back(high);
break;
}
else if(nums[low]+nums[high]<target)low++;
else high--;
}
return ans;
}


Best: Hashing
Approach: We can solve this problem efficiently by using hashing. We’ll use a hash-map to see if there’s a value target – i that can be added to the current array value i to get the sum equals to target. If target – i is found in the map, we return the current index, and index stored at target – nums[index] location in the map. 

This can be done in constant time.
TC:O(N)
SC:O(N)

vector<int> twoSum(vector<int> &nums,int target)
{
int i;
unordered_map<int,int> m;
vector<int> ans;
for(i=0;i<nums.size();i++)
{
if(m.count(target-nums[i])!=0)
{
ans.push_back(m[target-nums[i]]);
ans.push_back(i);
break;
}
m[nums[i]]=i;
}
return ans;
}
