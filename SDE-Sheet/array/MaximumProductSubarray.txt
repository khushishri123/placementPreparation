Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
TC:O(N)
Code:
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxi,mini,ans;
            ans=nums[0];
            maxi=nums[0];
            mini=nums[0];
            int n=nums.size();
            for(int i=1;i<nums.size();i++)
            {
                    if(nums[i]<0)
                    {
                            //swap maxi and mini because if maxi=10 and //mini=-10 and nums[i]=-2 ,then if we did not swap if will become: //maxi=-20 and mini=20 but we have to store maximum in maxi and minimum //in mini
                            int temp=maxi;
                            maxi=mini;
                            mini=temp;
                    }
                    maxi=max(nums[i],nums[i]*maxi);
                    mini=min(nums[i],nums[i]*mini);
                    ans=max(maxi,ans);
            }
            return ans;
    }
};