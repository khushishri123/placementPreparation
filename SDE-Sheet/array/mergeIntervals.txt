Problem Statement: mERGE iNTERVALS:
Eg:
Input :
1,3 8,10 2,6 9,9 15,18
Output: 1,6 8,10 15,18
Brute Force: 
First sort the intervals 
Then start from 1,3 and check which remainig interval are actually merging.
TC:O(N^2)+O(NlogN)
SC:O(N) {for storing the merged interval}

Effiecient app:

TC:O(NlogN)+O(N)
SC:O(N)

Code:
vector<vector<int>> merge(vector<vector<int>> intervals)
{
vector<vector<int>> mergeIntervals;
if(intervals.size()==0)return mergeIntervals;
sort(intervals.begin(),intervals.end());
vector<int> temp=intervals[0];
for(auto it:intervals)
{
if(temp[1]>=it[0])
{
temp[1]=max(temp[1],it[1]);
}
else
{
mergeIntervals.push_back(temp);
temp=it;
}
}
mergeIntervals.push_back(temp);
return mergeIntervals;
} 