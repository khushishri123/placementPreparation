//Two Pointer app.
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) (from 1st to last index)the container can contain is 49.

Brute force:
I will try out every possible combination .To calculate area I will take min of a[i],a[j] which will be my breadth and length will be j-i

int maxArea(vector<int> &heights)
{
int maxi=0;
int i,j;
for(i=0;i<n;i++)
{
for(j=i+1;j<n;j++)
{
int area=min(heights[i],heights[j])*(j-i);
maxi=max(maxi,area);
}
}
return maxi;
}

Optimised App:
Two pointer app. In this I will place l=0 and r=n-1 and then I will find area .Now to update l or r , I will check that if a[l]<a[r],means the height on which l is standing is lesser than the height on which r is standing ,so I will increase my l ,otherwise i will reduce my r.
Because I want to find the max area.

int maxArea(vector<int>& height) {
        int l,r,res;
        res=0;
        l=0;
        r=height.size()-1;
        while(l<r)
        {
            int area=min(height[l],height[r])*(r-l);
            res=max(res,area);
            if(height[l]<height[r])l++;
            else r--;
        }
        return res;
    }
TC:O(N)
SC:O(1)