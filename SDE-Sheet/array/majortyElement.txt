Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 Example 1:

Input: nums = [3,2,3]
Output: 3

Brute Force:
To iterate the array twice and find how many times an element is repeating.
TC:O(N^2) AND SC:O(1)

Better :
To take an array to store frequency of each number. Or we can can use a hash map for storing key,value pair where key will be the element and value is the no. of times that element is repeating.
TC: O(N) (when using frequency array)
     or
    O(NlogN) (when using Hash map) 
SC:O(N)

Best: (Moore Voting algorithm)
TC:O(N) and SC:O(1)

Intuition: The question clearly states that the nums array has a majority element. Since it has a majority element we can say definitely the count is more than N/2.

Majority element count = N/2 + x;

Minority/Other elements = N/2 – x;

Where x is the number of times it occurs after reaching the minimum value N/2.

Now, we can say that count of minority elements and majority element are equal upto certain point of time in the array. So when we traverse through the array we try to keep track of the count of elements and which element we are tracking. Since the majority element appears more than N/2 times, we can say that at some point in array traversal we find the majority element.

Approach: 

Initialize 2 variables: 
Count –  for tracking the count of element
Element – for which element we are counting

Traverse through nums array.
If Count is 0 then initialize the current traversing integer of array as Element 
If the traversing integer of array and Element are same increase Count by 1
If they are different decrease Count by 1

The integer present in Element is the result we are expecting 

Code:
int majorityElement(vector<int> &nums)
{
int count,element;
count=0;
element=0;
for(int num:nums)
{
if(count==0)element=num;
if(num==element)count++;
else count--;
}
return element;
}
