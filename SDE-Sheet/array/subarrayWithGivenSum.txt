Sliding Window
Problem Statement:
Find subaaray with given sum.
Brute Force:
TC:O(N^2)
SC:O(1)

Code:
int subarraySum(int arr[],int n,int sum)
{
int i,j;
int curr_sum=0;
for(i=0;i<n;i++)
{
curr_sum=arr[i];
for(j=i+1;j<=n;j++)
{
if(curr_sum==sum)
{
cout<<"Indexes are "<<i<<" to "<<j-1<<endl;
return 1;
}
if(curr_sum>sum || j==n)break;
curr_sum+=arr[j];
}
}
printf("No subarray found\n");
return sum;
}

Sliding Window App: (Only for +ive elemnts)
TC:O(N)
SC:O(1)
Code:
vector<int> subarraySum(int arr[],int n,int sum)
{
int curr_sum=0,start=0;
int i;
curr_sum=arr[0];
vector<int> vec;
for(i=1;i<=n;i++)
{
while(curr_sum>sum && start<i-1)
{
cur_sum-=arr[start];
start++;
}
if(curr_sum==sum)
{
vec.push_back(start);
vec.push_back(i-1);
return vec;
}
if(i<n)curr_sum+=arr[i];
}
vec.push_back(-1);
return vec;
}

Approach 3(If it contains -ive elements)
We have to count the no. of subarrays having given sum
Important Note:
There is a major difference bet these two questions: count the no. of subarrays having given sum and to find largest subarray with sum 0.
In the first one we will store frequecy of curr_sum because I want no. of subarrays while in second one I will store the index because I want largest subarray.See second question also.

Code:
int subarraySum(int arr[],int n,int sum)
{
map<int,int> m;
int i;
int curr_sum=0;
int count=0;
for(i=0;i<n;i++)
{
curr_sum+=arr[i];
if(curr_sum==sum)count++;
if(m.count(curr_sum-sum)!=0)count+=m.get(curr_sum-sum);
m[curr_sum]+=1;
}
return count;
}

