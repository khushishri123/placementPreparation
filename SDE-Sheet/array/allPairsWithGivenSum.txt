Given two unsorted arrays A of size N and B of size M of distinct elements, the task is to find all pairs from both arrays whose sum is equal to X.
Eg:
 A[] = {1, 2, 4, 5, 7}
B[] = {5, 6, 3, 4, 8} 
X = 9 
Output: 
1 8
4 5 
5 4
Explanation:
(1, 8), (4, 5), (5, 4) are the
pairs which sum to 9.

Brute Force
TC:O(n^m)
SC:O(1)

Searching App:
TC:O(logN+NLogN)
SC:O(1)

First sort the given array using a O(n log n) algorithm like Heap Sort or Quick Sort.
Run a loop for each element of array-B (0 to n).
Inside the loop, use a temporary variable say temp, and temp = K - B[i].
Search the temp variable in the first array i.e. A, using Binary Search(log n).

Best App:
TC:O(max(n,m))
SC:O(N)
Code:


void findPairs(int arr1[], int arr2[], int n,int m, int x)
{
    // Insert all elements of first array in a hash
    unordered_set<int> s;
    for (int i = 0; i < n; i++)
        s.insert(arr1[i]);

    // Subtract sum from second array elements one
    // by one and check it's present in array first
    // or not
    for (int j = 0; j < m; j++)
        if (s.find(x - arr2[j]) != s.end())
            cout << x - arr2[j] << " "
                 << arr2[j] << endl;
}