Problem:
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Brute Force:
we will use HashSet.
We will iterate to the entire array and put each element in HashSet.
Now we will place the elements of hashSet in front part of array and then we will return the size of hashset.
TC: O(Nlog(N)) +O(N)
O(Nlog(N)) because for traversing the array and logN for inserting it in set
O(N) to take it from hash set and placing them in array
SC: O(N)

Best Approach:
2 pointer Concept
Eg:       [1 1 2 2 2 3 3]
Output: 3,[1 2 3 2 2 3 3]

we will take 2 variables i and j
Initially i=0,j=1;
if(arr.length==0)return 0;
for(i=0,j=1;j<n;j++)
{
if(arr[i]!=arr[j])
{
i++;
arr[i]=arr[j];
}
}
return i+1;

TC: O(N)
SC: O(1)