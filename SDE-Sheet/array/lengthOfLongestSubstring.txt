https://takeuforward.org/data-structure/length-of-longest-substring-without-any-repeating-character/

Problem Statement: Given a String, find the length of longest substring without any repeating character.
Input: s = ”abcabcbb”
Output: 3

Brute Force:
Solution 1: Brute force Approach

Approach: This approach consists of taking the two loops one for traversing the string and another loop – nested loop for finding different substrings and after that, we will check for all substrings one by one and check for each and every element if the element is not found then we will store that element in HashSet otherwise we will break from the loop and count it.

int solve(string str)
{
int maxi=INT_MIN;
if(str.size()==0) return 0;
for(int i=0;i<str.size();i++)
{
unordered_set<char> s;
s.insert(str[i]);
for(int j=i+1;j<str.size();j++)
{
//if that element is already present in my hash set ,then break
if(s.find(str[j])!=s.end())
{
maxi=max(maxi,j-i);
break;
}
s.insert(str[j]);
}
}
return maxi;
}

Time Complexity: O( N2 )
Space Complexity: O(N) where N is the size of HashSet taken for storing the elements

Solution 2: Optimised  Approach 1

Approach: We will have two pointers left and right. Pointer ‘left’ is used for maintaining the starting point of substring while ‘right’ will maintain the endpoint of the substring.’ right’ pointer will move forward and check for the duplicate occurrence of the current element if found then ‘left’ pointer will be shifted ahead so as to delete the duplicate elements.

 int lengthOfLongestSubstring(string s) {
      int maxi=0;
        int left,right;
        left=0;
        right=0;
        unordered_map<char,int> m;
        for(right=0;right<s.size();right++)
        {
            if(m.count(s[right])!=0)
            {
    left=max(m[s[right]]+1,left); //take max .To understand why we take max workout on : abba
            }
            m[s[right]]=right;
            maxi=max(maxi,right-left+1);
        }
        return maxi;
    }

Time Complexity: O( 2*N ) (sometimes left and right both have to travel complete array)

Space Complexity: O(N) where N is the size of HashSet taken for storing the elements

