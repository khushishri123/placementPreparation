We are given histograms and we have a certain heights and the width of every histogram is 1 unit. And we have find what is the area of the largest rectangle in that histogram. 
Eg;
arr=[2,1,5,6,2,3,1]
Output: 10
= 5*2=10
Brute Force:
Try out every histogram block as a particular rectangle. 
Let suppose we take this 2 as the height of my rectangle. So the max area that we can form by taking height of our retangle as 2 is 2 {=l*b=2*1}

By taking 1: area=1*6=6

By taking 5: area=5*2=10

By taking 6: area=6*1=6

By taking 2: area=2*4=8

By taking 3: area=3*1=3
So the max area that I can make is 10.

Now in order to figure out till how much on the right and till how much on the left we have to move. If we can figure out which is the first element that is smaller than our considered height then beyond that we cannot take.
Same think for the left side.Left smaller and right sammler will form our width. 

Let my considered height is a[4],then its left smaller is at index 1 and right smaller is at index 6.
Width=5-2+1
Heigth=a[4]
Area=width*height
Formula=(rightSmaller-leftSmaller+1)*a[i]

TC:O(N^2)

Better App:
Now to calculate Right Smaller, we will make use of stack.We will store index.We will start from 0 index and we will see that whether there is some greater element on the stack.But there is no gretaer element.So we can say that for a[0],my left boundary is 0 itself.So 
leftSmall[0]=0
Then we will push index 0 in stack.

i=1
Now a[i]=1 ,agin I will check that if there exists some greater element in the stack. So yes a[0]=2 which is greater than a[1].Now since we are finding left Smaller there is no need to store a[0] becuase it isw a gretaer element and I am looking for left smaller.
After taking it out stack will be empty .Since out statck is emepty leftSmaller for a[1] is 0 .
leftSmall[1]=0
After then we will push 1 on stack.
Remember whenever we found element having gretaer value in stack ,then we will pop it untill and unless the stack is empty or either I am standing on some lower index.

a[2]=5,now in the stack we have a[1]=1 whcih is smaller ,so for 5 ,1 is left our boundary.
So whatever is at top we will add 1 to it.
leftSmall=1+1=2
Now push 2 index on stack.

For 6=2+1=3 will be the left boundary
.
.
.
leftSmall: 0 0 2 3 2 5 0

In order to compute right smaller,we will start from right side.

For a[6]=1 ,right now stack is empty . So right smaller for a[6] is 6
Then push 6 index on stack.
For a[5]:
and 6 is smaller than a[5],so right smaller for a[5] is st.top-1=6-1=5
Then push index 5 on stack.

We move to a[4],stack top has 5 index which is 3 ,2<3 ,so we will pop out index 5 becuase it is greater than 2.
But index 6 is lesser than index 4,so right boundary will be st.top()-1
a[4]=6
.
.
.
rightSmall: 0 6 3 3 5 5 6
Remember that we have to pop from stack if the element is greater than or equal to the element.
After calculating right and left smaller ,we can calculate area by traversing the array once more.

TC:O(N)+O(N)+O(N)+O(N)+O(N)=O(5N)
SC:O(3N)

Code:

 int largestRectangleArea(vector < int > & heights) {
      int n = heights.size();
      stack < int > st;
      int leftsmall[n], rightsmall[n];
      for (int i = 0; i < n; i++) {
        while (!st.empty() && heights[st.top()] >= heights[i]) {
          st.pop();
        }
        if (st.empty())
          leftsmall[i] = 0;
        else
          leftsmall[i] = st.top() + 1;
        st.push(i);
      }
      // clear the stack to be re-used
      while (!st.empty())
        st.pop();

      for (int i = n - 1; i >= 0; i--) {
        while (!st.empty() && heights[st.top()] >= heights[i])
          st.pop();

        if (st.empty())
          rightsmall[i] = n - 1;
        else
          rightsmall[i] = st.top() - 1;

        st.push(i);
      }
      int maxA = 0;
      for (int i = 0; i < n; i++) {
        maxA = max(maxA, heights[i] * (rightsmall[i] - leftsmall[i] + 1));
      }
      return maxA;
    }

Most Opt App.:
Intuition:

This approach is a single pass approach instead of a two-pass approach. When we traverse the array by finding the next greater element, we found that some elements were inserted into the stack which signifies that after them the smallest element is themselves

So we can find the area of the rectangle by using arr[i] * (right smaller â€“ left smaller -1 ).

TC:O(N)+O(N)
SC:O(N)

   //for largestAreaRectangle
        //TC:O(N)+O(N)
        //SC:O(N)

     int largestRectangleArea(vector < int > & histo) {
      stack < int > st;
      int maxA = 0;
      int n = histo.size();
      for (int i = 0; i <= n; i++) {
        while (!st.empty() && (i == n || histo[st.top()] >= histo[i])) {
          int height = histo[st.top()];
          st.pop();
          int width;
          if (st.empty())
            width = i;
          else
            width = i - st.top() - 1;
          maxA = max(maxA, width * height);
        }
        st.push(i);
      }
      return maxA;
    }



