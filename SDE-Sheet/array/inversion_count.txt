Problem Statement: Given an array of N integers, count the inversion of the array (using merge-sort).

What is an inversion of an array? Definition: for all i & j < size of array, if i < j then you have to find pair (A[i],A[j]) such that A[j] < A[i].

EG:
Input Format: N = 5, array[] = {1,2,3,4,5}

Result: 0

Explanation: we have a sorted array and the sorted array 
has 0 inversions as for i < j you will never find a pair 
such that A[j] < A[i]. More clear example: 2 has index 1 
and 5 has index 4 now 1 < 5 but 2 < 5 so this is not an 
inversion.


Brute Force:
TC:O(N^2)
SC:O(1)

Code:
class Test {
    static int arr[] = new int[] { 1, 20, 6, 4, 5 };

    static int getInvCount(int n)
    {
        int inv_count = 0;
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++)
                if (arr[i] > arr[j])
                    inv_count++;

        return inv_count;
    }

    // Driver method to test the above function
    public static void main(String[] args)
    {
        System.out.println("Number of inversions are "
                           + getInvCount(arr.length));
    }
}

Optimised APP:
TC:O(Nlogn)
SC:O(N)
Using merge sort

Code:
int merge(int arr[],int temp[],int lb,int mid,int ub)
{
int i,j,k;
int count=0;
i=lb;
j=mid;
while(i<=(mid-1) && j<=ub)
{
if(arr[i]<arr[j])temp[k++]=arr[i++];
else
{
temp[k++]=arr[j++];
count+=mid-i;
}
}
while(i<=(mid-1))temp[k++]=arr[i++];
while(j<=ub)temp[k++]=arr[j++];
for(i=lb;i<=ub;i++)arr[i++]=temp[i];
return count;
}
int mergeSort(int arr[],int temp[],int lb,int ub)
{
int count=0;
int mid;
while(lb<=ub)
{
mid=(lb+ub)/2;
count+=mergeSort(arr,temp,lb,mid);
count+=mergeSort(arr,temp,mid+1,ub);
count+=merge(arr,temp,lb,mid+1,ub);
}
return count;
}
int getInversionCount(int arr[],int n)
{
int temp[n];
return mergeSort(arr,temp,0,n-1);
}
int main()
{
    int arr[] = { 1, 20, 6, 4, 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int ans = getInversionCount(arr, n);
    cout << " Number of inversions are " << ans;
    return 0;
}



