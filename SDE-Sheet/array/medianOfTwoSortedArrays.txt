Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Brute force:
We can use 2 pointers and store the elements in a DS in sorted order.
After then we can calculate median.
TC: O(N1+N2)
SC:O(N1+N2)

But you can reduce SC by storing only those elements that are required for finding medain 
For eg: if n1+n2=10 then you will require 5th and 6th element ,so store them instaed of storing the entire array.

2nd Appro:
Since the arrays are sorted ,we can use Binary search
see explanation from video
https://www.youtube.com/watch?v=NTop3VTjmxk


TC:O(log(m+n))
SC:O(1)

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
if(nums1.size()>nums2.size())return findMedianSortedArrays(nums2,nums1);
int n1=nums1.size();
int n2=nums2.size();
int low=0;
int high=n1;
while(low<=high)
{
int cut1=(low+high)/2;
int cut2=(n1+n2+1)/2-cut1;
int l1=cut1==0?INT_MIN:nums1[cut1-1];
int l2=cut2==0?INT_MIN:nums2[cut2-1];
int r1=cut1==n1?INT_MAX:nums1[cut1];
int r2=cut2==n2?INT_MAX:nums2[cut2];

if(l1<=r2 && l2<=r1)
{
if((n1+n2)%2==0)return (max(l1,l2)+min(r1,r2))/2.0;
else return max(l1,l2);
}
else if(l1>r2)high=cut1-1;
else low=cut1+1;
}
return 0.0;
}
