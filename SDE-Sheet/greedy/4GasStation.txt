There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Explanation:
gas= [1,2,3,4,5]
cost=[3,4,5,1,2]
diff=[-2,-2,-2,3,3]
It means that at i=0 , we have gas[0]=1 and the amount required to move to the next station is cost[0]=3 which means that we did not have enough gas to move to the next station so it cannot be our starting index. We will start from i=1 , again we did not have so we will start from i=2 , again we did not have enough gas, then at i=3 , gas[3]-cost[3]=3 means now we have additional gas of 3 , so it can be our statring index. 
It is given in the question that we have a unique solution.

The function takes in two arrays: gas and cost, where gas[i]gas[i]gas[i] represents the amount of gas available at the i-th gas station, and cost[i]cost[i]cost[i] represents the amount of gas needed to travel from the i-th gas station to the next one.

The function first calculates the total amount of gas available at all the gas stations (totalGas) and the total amount of gas needed to travel around all the gas stations (totalCost). If totalGas is less than totalCost, it means that it is not possible to travel around all the gas stations, so the function returns -1.

Next, the function starts at the first gas station (start=0)(start = 0)(start=0) and iterates through the gas stations. At each iteration, it calculates the remaining gas after visiting the current gas station (remainsGas) and adding the gas available at that station (gas[i])(gas[i])(gas[i]) and subtracting the gas needed to travel to the next gas station (cost[i])(cost[i])(cost[i]). If remainsGas becomes negative at any point, it means that it is not possible to travel from the current gas station to the next one without running out of gas. In this case, the function sets the starting gas station to the next one (start=i+1)(start = i+1)(start=i+1) and resets the remaining gas to 0 (remainsGas=0)(remainsGas = 0)(remainsGas=0).

Finally, the function returns the starting gas station that allows the travel around all the gas stations.

Complexity
Time complexity:
o(n)

Space complexity:
O(1)


Code:
class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
          int n=gas.size();
        int total_gas=0,total_cost=0;
        int curr_gas=0, starting_point=0;
        for(int i=0;i<n;i++)
        {
            //these two variable are to check if no case is possible
            total_gas+=gas[i];
            total_cost+=cost[i];
            //for checking the total present gas at index i
            curr_gas+=gas[i]-cost[i];
            if(curr_gas<0)
            {
     //there is a breakdown....so we will start from next point or index
                starting_point=i+1;
                //reset our fuel 
                curr_gas=0;
            }
        }
        return (total_gas<total_cost)?-1:starting_point; 
    }
};
