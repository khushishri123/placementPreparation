Given an integer array nums and an integer k, modify the array in the following way:

choose an index i and replace nums[i] with -nums[i].
You should apply this process exactly k times. You may choose the same index i multiple times.

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:

Input: nums = [4,2,3], k = 1
Output: 5
Explanation: Choose index 1 and nums becomes [4,-2,3].
Example 2:

Input: nums = [3,-1,0,2], k = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].
Example 3:

Input: nums = [2,-3,-1,5,-4], k = 2
Output: 13
Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].

class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
            int sum = 0,i=0,length=nums.size();
        sort(nums.begin(), nums.end());
        while(nums[i]<0 && i<length){
            if(k<=0)
                break;
            nums[i] *= -1;
            i++;
            k--;
        }
        sort(nums.begin(), nums.end());
        if(k>0 && nums[0]!=0)
            if(k%2)
                nums[0] *= -1;
        for(auto x:nums){
            sum += x;
        }
        return sum;
    }
};