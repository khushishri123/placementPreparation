Theory:
The code showcases a fully functional web server compliant with Hypertext Transfer Protocol HTTP in which a web application developer can deploy his/her website.The HTTP webserver has been written from scratch using C/C++ and has Socket Programming as it's backbone.

Simply instantiate the TMWebProjector class (server),
and pass on the port number on which you wish to have the server running, invoke start method. That's all it takes.
It contains the conventional Request and Response classes. 
All incoming HTTP requests for the webserver are wrapped in an object of class Request. Similarly, the response generated by webserver, post processing the Client's request ,is wrapped in an object of class Response.

			  SCOPE
1) CONVENTIONAL REQUEST & RESPONSE CLASSES: 
All incoming HTTP requests are wrapped in an object of class Request and the response generated by webserver post processing the Client's request is wrapped in an object of class Response.

2) FORWARDING REQUEST:
Let's you forward requests in the most Object Oriented way, through mapping functions.To forward a request you just have to call forward method of Request class while calling it  pass the name of file containing that HTML or Url of that mapped function.

/*
Inner implementation of forward facility:
To implement this feature we have declared forward method in request class.Also,we have provided 1 infinite loop inside the accept loop to implement this feature. If the length of request->forwardTo is 0,it means that request is not forwarded and we will come out of the loop . If the resource(resource is the one to whom request is forwarded) name is not found ,then also we will come out of the loop.
If the request is forwarded then only 3 things will change : resource name ,mimeType and isClientSideResource.Then we will continue in the loop.
*/

3)MULTIPLE URL MAPPING:
The request can be forwarded to a client side resource or server side resource . This facility helps you to forward a request to a server side resource . You just have to call onRequest method of TMWebProjector.

void onRequest(string url,void (*ptrOnRequest)(Request &,Response &)); 

Remember the function that you are mapping should have two parameters which are the alias of Request and Response class.
if no resource name is specified then we'll serve the contents of index.html OR index.htm .But if WAD has provided the resource name and it is not available then it will show 404 Error Page.


4)We have also provided the facility of sharing data across multiple services in one request.But only string type data is sharable.You have to call setKeyValue method of request class and while calling that method you have to pass 2 arguments : Key and Value 
To get that value you have to call getKeyValue method of Request class.
/*
To provide this feature ,we are creating the object of Request class outside the infinite loop so that if the request is forwarded then we will pass the same request type object while calling that mapped function.
But if the request is not forwarded then again the new request type object will be created.To share resource /data we have increased 2 methods in and 1 property in Request class :
map<string,string> keyValues;
void setKeyValue(string k,string v);
string getKeyValue(string k);
*/


5) CREATING WEBPAGES DYNAMICALLY:
Simply pass on the contents of your HTML line by line to write method of Response class, also pass on the names/id of the dynamic fields to write method and the replacements will be made while the HTML will be served as a response
similar to print method of printwriter in case of Java Servlets


6) TEMPLATE FEATURE:
Making use of resource forwarding  the webpage creator needs to enclose the entire code in response.write("...") that lead to a lot of unnecessary typing.  Setup a key-value pair in Request object by placing call to request class' set method, and wherever they wish to make replacement simply enclose the appropriate key in $$$(), this file will be given a special treatment and processed differently hence the person no longer needs to write long functions with response.write on each line

Instead what we can do is, provide him/her with a feature where they type out a html in some file having ext. tpl.This tool will work only  for those files whose extension is tpl.This tool will replace the dynamic content with its value and will enclose the entire document in response.write .This will save a lot of time of Webpage creator.He can just copy from it.Remember that before executing myapp.cpp (file created by the webpage developer) you have to execute the tpl2c.c So that  tpl.h and ErrorPage.tpl.cpp( this cpp file will be generated for all tpl files that you have provided to tpl2c.c while executing it).
 
While excecuting tpl2c you have to provide the size(number of tpl files for which you want to generate cpp files) and then all the tpl files separated with space.

tpl.h will be included in myapp.cpp and in myapp.cpp you have to call registerTPLs method which is present in tpl.h 
/*

I have created a tool tpl2c which will generate 2 things:
tpl.h and ErrorPage.tpl.cpp {nameOfTheFile.ext.cpp}

tpl.h has 2 declared methods registerTPLs and getErrorPage_TPL.
Remember there will be only
Code of tpl.h which will be generated is:
#ifndef __TPL
#def __TPL123
#include<tmwp>
using namespace std;
void getErrorPage_TPL(Request &request,Response &response)
void registerTPLs(TMWebProjector *server)
{
server->onRequest("/ErrorPage.tpl",getErrorPage_TPL);
}
#endif

And ErrorPage.tpl.cpp will contain the definition of getErrorPage_TPL.

7) URL DECODING:
The Query String (URL) involves some encoding called URL Encoding
URL encoding converts characters into a format that can be transmitted over the Internet.
So we have provided the facility of decoding that query string .The webpage developer can extract the data that has came in the query string using get method of Request class.
e.g. ->Spaces are replaced by "%20", & are replaced by %26 , + are replaced by %2B and so on and so forth
So I had to design an Encoding and Decoding class 
