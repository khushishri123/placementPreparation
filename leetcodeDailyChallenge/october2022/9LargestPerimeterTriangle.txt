Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.
Example 1:
Input: nums = [2,1,2]
Output: 5
Example 2:
Input: nums = [1,2,1]
Output: 0

Approach 1: Sort
Intuition

Without loss of generality, say the sidelengths of the triangle are aâ‰¤bâ‰¤c. The necessary and sufficient condition for these lengths to form a triangle of non-zero area is a+b>c.

Say we knew cc already. There is no reason not to choose the largest possible aa and bb from the array. If a + b > c, then it forms a triangle, otherwise it doesn't.

Algorithm

This leads to a simple algorithm: Sort the array. For any cc in the array, we choose the largest possible aâ‰¤bâ‰¤c: these are just the two values adjacent to c. If this forms a triangle, we return the answer.

public int largestPerimeter(int[] A) {
        Arrays.sort(A);
            for(int i=A.length-3;i>=0;i--)
            {
                   if(A[i]+A[i+1] > A[i+2])return A[i]+A[i+1]+A[i+2];
            }
            return 0;
    }
