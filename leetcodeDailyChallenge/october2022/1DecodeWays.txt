A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").

SEE VIDEO: https://www.youtube.com/watch?v=o1i7JYWbwOE

TC:O(N)
SC:O(1)


class Solution {
public:
        //it is quite similar fibonacci series in which we require previous and previous to previous sol
    int numDecodings(string s) {
       if(s.size()==0 || s[0]=='0')return 0; 
            //if size is 1 and its range is [1-9]
            if(s.size()==1)return 1;
            //count1 will be storing prev to prev sol
            //count 2 will be storing previous sol
            int count1=1;
            int count2=1;
            for(int i=1;i<s.size();i++)
            {
                    //taking single digit
                    int d=s[i]-'0';
                    //taking 2 digits
                    int dd=(s[i-1]-'0')*10 + d;
                    int count=0;
                    //check for single digit and if valid you will consider till previous point
                    if(d>0)count+=count2;
                    //checking for last two digit and if valid you will consider prev to prev
                    if(dd>=10 && dd<=26)count+=count1;
                    count1=count2;
                    count2=count;
            }
            return count2;
    }
};