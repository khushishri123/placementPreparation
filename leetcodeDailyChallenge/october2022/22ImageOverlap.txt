To understand this question ,see this you tube video:
https://www.youtube.com/watch?v=gl57zvHrgrQ

You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.

We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.

Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.

Return the largest possible overlap.

 

Example 1:


Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We translate img1 to right by 1 unit and down by 1 unit.

The number of positions that have a 1 in both images is 3 (shown in red).

Example 2:

Input: img1 = [[1]], img2 = [[1]]
Output: 1
Example 3:

Input: img1 = [[0]], img2 = [[0]]
Output: 0


 int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {
        
            vector<pair<int,int>> v1;
            vector<pair<int,int>> v2;
            for(int i=0;i<img1.size();i++)
            {
                    for(int j=0;j<img1[0].size();j++)
                    {
                            if(img1[i][j]==1)v1.push_back({i,j});
                            if(img2[i][j]==1)v2.push_back({i,j});
                    }
            }
            map<pair<int,int>,int> mp;
            int ans=0;
            for(auto it1:v1)
            {
                    for(auto it2:v2)
                    {
                            int x=it1.first-it2.first;
                            int y=it1.second-it2.second;
                            mp[{x,y}]++;
                            ans=max(ans,mp[{x,y}]);
                    }
            }
            return ans;
    }
