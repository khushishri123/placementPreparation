You have n dice and each die has k faces numbered from 1 to k.
Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.
Example 1:
Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:
Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.

it is quite similar to CoinChange2   dp problem
In this the two changing parameters will be b and target,becuase every dice will have same value of k.
In the starting we have all the dices available ,so let suppose I choose 1st dice ,so I have to run a loop from 1 to k beucase I can choose any one as the front face.So if I am choosing 1 then my target will be reduced by 1 and my n will also be reduced by 1 becuase I used one of my dice.
     


Memoization:
TC:O(N*target*K)
SC:O(N*target)+ASP

#define mod int(pow(10,9)+7)
class Solution {
public:
        int solve(int n,int k,int target,vector<vector<int>> &dp)
        {
                if(n==0 && target==0)return 1;
                if(target<=0 || n<=0)return 0;
                if(dp[n][target]!=-1)return dp[n][target];
                int ans=0;
                for(int i=1;i<=k;i++)
                {
                        ans+=solve(n-1,k,target-i,dp);
                        ans%=mod;
                }
                return dp[n][target]=ans;
                        
        }
    int numRollsToTarget(int n, int k, int target) {
         vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
            return solve(n,k,target,dp);
         
    }
};


Tabulation:
TC:O(n*target*k)
SC:O(n*target)

 int numRollsToTarget(int n, int k, int target) {
         vector<vector<int>> dp(n+1,vector<int>(target+1,0));
            //return solve(n,k,target,dp);
            //base case,when both target and n are exhausted
            dp[0][0]=1;
            
            for(int N=1;N<=n;N++)
            {
                    for(int tar=1;tar<=target;tar++)
                    {
                            int ans=0;
                for(int i=1;i<=k;i++)
                {
                        if(N-1>=0 && tar-i>=0)
                        {
                         ans+=dp[N-1][tar-i];
                        ans%=mod;       
                        }
                }
                dp[N][tar]=ans;
                    }
            }
            
         return dp[n][target];
    }