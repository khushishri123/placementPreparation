Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.

An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false


We need a subarray say from i to j such that sum of all elements is divisible by k.

sum_j means prefix sum from 0 to j.

Sum_i means prefix sum from 0 to i.

 => (sum_j - sum_i) % k = 0
 => sum_j % k - sum % k = 0
 => sum_j % k = sum_i % k 
Thus for some prefix_sum(0,j) , we need to check if there exist some prefix_sum(0,i) such that both are equal.

If yes then return true.
Otherwise check for some other j
Lets do a dry run on first example:

Given, nums : 23 2 4 6 7 , k = 6

Prefix_Sum at every iteration from 0->i :

  i = 0  , prefixSum = 23%6 = 5       | map[5] = 0 (new entry)
  i = 1 , prefixSum = (5+2)%6 = 1     | map[1] = 1 (new entry)
  i = 2 , prefixSum = (1+4)%6 = 5     | map[5] (already exist) !! -> Possible answer
Also, i - map[5] = 2 > 1 ... therefore atleast 2 elements condition is also satisfied

we  will use hashing in which map will store remainder,index
if we find out that remainder already exists then we will check that the difference in between the index should be 
greater than 1 because in the question it is mentioned that we require atleast 2 elements .Edge case: if sum=0 then we have to check that index should not be zero because although 0 is divisible by any integer but it consists of only 1 element and 
we want atleast 2 elements . 

TC:O(N)
SC:O(N%k)


bool checkSubarraySum(vector<int>& nums, int k) {
       int sum=0;
            int mod;
           map<int,int> m;
            int n=nums.size();
            for(int i=0;i<n;i++)
            {
                    sum+=nums[i];
                    mod=sum%k;
                    if(mod==0 && i)return true; 
//found thge required prefix
                    if(m.find(mod)!=m.end())
                    {
//check if atleast 2 elements are there
                            if(i-m[mod] > 1)return true;
                    }
                    else
                    {
                            m[mod]=i;
                    }
            }
            return false;
    }


