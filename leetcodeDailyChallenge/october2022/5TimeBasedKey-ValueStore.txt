Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"


In this question we have written code in Java becuase here we will learn about two new functions:
1)putIfAbsent(key,value)

2)floorEntry(key)->This function is valid only for TreeMap. It returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
Practical Application : The possible applications of this functions are aplenty. Starting from maximum distance with given petrol or possible dishes with given ingredients. Former one is discussed in code below.

3)floorKey() : It returns the greatest key less than or equal to the given key, or null if there is no such key.

Code:

class TimeMap {
 Map<String,TreeMap<Integer,String>> keyTimeMap;
    public TimeMap() {
        keyTimeMap=new HashMap<>();
    }
    
     public void set(String key, String value, int timestamp) {                     keyTimeMap.putIfAbsent(key,new TreeMap<>());
            keyTimeMap.get(key).put(timestamp,value);
    }
    
    public String get(String key, int timestamp) {
        if(!keyTimeMap.containsKey(key))return "";
            Map.Entry<Integer,String> entry=keyTimeMap.get(key).floorEntry(timestamp);
            if(entry==null)return "";
            return entry.getValue();
    }
}