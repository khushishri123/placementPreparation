You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.
You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].
Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1. 

Example 1:


Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 
Example 2:

Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.
Example 3:

Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.


Given an array , cut it into d contiguous subarrays and return the minimum sum of max of each subarray.
Let's understand using the test case given:
jobDifficulty[] = [6,5,4,3,2,1], d = 2;
So we have to partition the array into 2 such that the maximum of each subarray gives the minimum result. Still Confused?? Read more ->

Case 1:
jobDifficulty[] = [6,5,4,3,2], [1]
sum = max([6,5,4,3,2]) + max([1]) = 6+1 = 7 ------> Solution 1

Case 2:
jobDifficulty[] = [6,5,4,3], [2,1]
sum = max([6,5,4,3]) + max([2,1]) = 6+2 = 8 ------> Solution 2.

And similiarly we have to find the minimum sum from max nums of subarrays.
Hope it makes sense now.

So we have to try out various possible ways to do so and this can be achievd by using the Dynamic Programming!!!

TC:O(NNd)

    int f(vector<int> &jd,vector<vector<int>> &dp,int n,int ind,int d)
        {
                if(d==1)return *max_element(jd.begin()+ind,jd.end());
                        if(dp[ind][d]!=-1)return dp[ind][d];
                int res=INT_MAX; //since we want min we will assign max value to res
                int maxi=INT_MIN;
                
                for(int i=ind;i<=n-d;i++)
                {
                maxi=max(maxi,jd[i]);
                        res=min(res,maxi+f(jd,dp,n,i+1,d-1));
                }
                return dp[ind][d]=res;
         }
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int n=jobDifficulty.size();
            if(n<d)return -1;
          vector<vector<int>> dp(n,vector<int>(d+1,-1));
            return f(jobDifficulty,dp,n,0,d);
    }