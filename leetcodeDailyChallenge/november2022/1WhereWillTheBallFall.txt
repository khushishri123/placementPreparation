//See explanation:
https://leetcode.com/problems/where-will-the-ball-fall/solution/


You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.

 

Example 1:



Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.
Ball b0 is dropped at column 0 and falls out of the box at column 1.
Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.
Example 2:

Input: grid = [[-1]]
Output: [-1]
Explanation: The ball gets stuck against the left wall.
Example 3:

Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]

Let M be the number of rows and N be the number of columns in the grid.

Time Complexity: O(M⋅N) The recursive method findBallDropColumn to find ball position is called for each of the N columns.

For each recursive call for findBallDropColumn the row number starts with 0 and increments by 1 in every recursive call. In the worst case, if the ball is not stuck at any cell in the middle of the grid, the recursion will continue for M rows.

Thus, the time complexity is O(M⋅N).

Space Complexity: O(M) The maximum depth of recursive call stack will be equal to number of rows that is, M.

class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        vector<int> result(grid[0].size(),0);
            for(int i=0;i<grid[0].size();i++)
            {
                    result[i]=dfs(0,i,grid);
            }
            return result;
    }
        int dfs(int row,int col,vector<vector<int>> &grid)
        {
                //base case
                if(row==grid.size())return col;
                
                //next col will differ according to the curretn value of cell, if grid[row][col]==1 it means that diagonal is from left to right and next col will be col+1 while if the diagonal is from right to left then next col will be col-1.
                // we can directly find it by simple formula: nextCol=current_col+grid[row][current_col]
                int nextCol=col+grid[row][col];
                if(nextCol<0 || nextCol>=grid[0].size() || grid[row][col]!=grid[row][nextCol])return -1;
                return dfs(row+1,nextCol,grid);
        }
};