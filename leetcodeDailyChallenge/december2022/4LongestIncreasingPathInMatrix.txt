Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

We apply dfs.

class Solution {
public:
static int dfs(int i,int j,int prev,vector<vector<int>> &mat,vector<vector<bool>> &vis,vector<vector<int>> &length)
{
    int n=mat.size();
    int m =mat[0].size();
    if(i<0 || j<0 || i>=n || j>=m || mat[i][j]<=prev || vis[i][j])return 0;
    if(length[i][j]!=-1)return length[i][j];
    vis[i][j]=true;
    int len=0;
    int up=dfs(i-1,j,mat[i][j],mat,vis,length);
    int down=dfs(i+1,j,mat[i][j],mat,vis,length);
    int left=dfs(i,j-1,mat[i][j],mat,vis,length);
    int right=dfs(i,j+1,mat[i][j],mat,vis,length);
    len=1+max(up,max(down,max(left,right)));
    vis[i][j]=false;
    return length[i][j]=len;
}
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<bool>> vis(n,vector<bool>(m,false));
        vector<vector<int>> length(n,vector<int>(m,-1));
        int maxi=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j])
                {
                    //INT_MIN will be the previous 
                    maxi=max(maxi,dfs(i,j,INT_MIN,matrix,vis,length));
                }
            }
        }
        return maxi;
    }
};